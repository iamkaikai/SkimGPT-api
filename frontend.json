{"general":{"title":"<title>CS 10 | Problem solving</title>\n","num_sections":17,"overview":"Here are summaries of the given content:\n\n1. Title: Processing XML\n\nThis section explains processing XML, its features, parsing XML documents, and differences between DOM and SAX parsers. Additionally, it contains examples of processing XML with Python and advantages and disadvantages of processing XML.\n\n2. Title: CS 10 Problem Solving: Getting Stuff from the Web\n\nThis section of the CS 10 course covers the basics of getting information from the web, including web architectures, protocols, scraping web data using Python, best practices for ethical web scraping, and real-world applications for web data.\n\n3. Title: Java Notes - An Overview\n\nThis section contains important notes on Java programming language that can help improve coding skills, including detailed explanations of Java programming language, its features and capabilities, key concepts, tips for writing efficient and optimized Java code, examples of common coding errors, and useful resources for further learning and development in Java programming.\n\n4. Title: Graphical User Interface for CS10 Problem Solving Course\n\nThis section of the CS10 course focuses on the importance of having a graphical user interface in solving computer science problems, including the definition of GUI, examples of GUI applications used in problem-solving, and guidelines for creating effective GUI design.\n\n5. Title: Utilizing Java Packages for Problem Solving in CS 10\n\nThis article explores how Java packages can aid in problem-solving in CS 10, including detailed references and supplementary Java tutorials that provide a starting point for those seeking to enrich their knowledge.\n\n6. Title: FlickrSearch Java App\n\nThis article explains how the FlickrSearch.java application utilizes various methods to construct and execute queries and fetch images from URLs specified in XML. It also explains how to form image URLs with the image mechanism in Java.\n\n7. Title: Introduction to Network Programming\n\nThis article introduces the concept of network programming, focusing on how computers transfer information and interpret bits, network protocols, HTTP, and URL. It also explores how Java libraries aid in obtaining data from web servers within a program.\n\n8. Title: CS 10 Problem Solving: An Overview\n\nThis section teaches students how to solve complex problems using computing methods, programming concepts, and essential skills required for sound programming practice. The teaching methods used for the course include lectures, labs, and activities designed to maximize learning outcomes.\n\n9. Title: The Finished Product: A Guide to Completing Your Problem-Solving Task\n\nThis guide provides essential tips and techniques to help achieve a successful outcome and complete a problem-solving task, including identifying and prioritizing the steps needed to complete the task, using tools such as checklists and project plans to stay organized, reviewing and refining work, and celebrating success.\n\n10. Title: Building a Simple GUI for a Photo Browser\n\nThis article outlines the process of creating a simple GUI for a photo browser using Java, including the role of anonymous classes and layout managers in GUI design, MouseEvent objects, and various components like buttons, text fields, and combo boxes.\n\n11. Title: Web Services and Processing Data from Web Servers\n\nThis section of CS 10 introduces learners to web services and processing data from web servers using a query interface for Flickr, sending and processing queries, and using graphical user interfaces (GUI) for a better user experience.\n\n12. Title: Inner and Anonymous Classes in Java Programming\n\nThis content explains inner and anonymous classes, unique forms of class definitions in Java that offer increased information hiding and local access to variables and methods, and describes how they offer distinct advantages in Java programming.\n\n13. Title: CS 10 Web Services Overview\n\nThis article provides a brief overview of web services and their use in modern computer programming, exploring different types of web services and their various real-world applications.\n\n14. Title: Introduction to using REST for web services\n\nThis paragraph explains how to use web services to transfer information from a server using a basic but powerful mechanism called REST. It also gives an example of how to create a greeting program using REST, explains the use of parameters in a URL, and the need to encode special characters.\n\n15. Title: Java Tutorials on Graphical User Interface and Web Data Processing\n\nThis section covers Java tutorials on Swing for Graphical User Interface and IO for getting data from the web, web services for exchanging data over the web, JAXP, particularly DOM, for processing XML, and code files from class for reference.\n\n16. Title: Introduction to XML and Parsing in Java\n\nThis material focuses on handling XML data and interpreting various tags using Java DOM, including writing a program to pull URLs from an XML file. It also explains the use of Document Object Model (DOM) to search for elements with specific tag names, XML parsing in Java, and proper encoding of special characters in parameter values in URLs.","result_html":"<title>CS 10 | Problem solving</title>\n<title>CS 10 | Problem solving</title>\n<div id=\"readability-page-1\" class=\"page\"><div id=\"content\">\n<h2 id=\"notetitle\">Web services</h2> <p>So far we've been dealing with the world as it exists on our individual computers. But a lot of exciting problems arise in the context of having multiple machines work together on something. We'll get a taste of such approaches in the upcoming week, starting today with the basic question of how to obtain and process data from web servers. Our goal is to build a simple query interface for <a href=\"http://www.flickr.com/\">Flickr</a>; we'll cover how to send and process queries, and how to use a graphical user interface (GUI) to provide a somewhat nicer interface than we have seen.</p>\n\n<p>We'll be using a number of different Java packages to help out. As usual, Oracle provides a detailed reference. Somewhat more useful to get going, they also provide a set of <a href=\"http://docs.oracle.com/javase/tutorial/index.html\">Java tutorials</a>. I've provided links to relevant ones within the menu below. Note that they cover much more than we do, and are just provided for your reference in case you want supplementary reading.</p>\n\n<h3>Outline</h3>\n<ul>\n <li><a href=\"#gui\">Graphical user interface</a> [Java tutorials on <a href=\"http://docs.oracle.com/javase/tutorial/uiswing\">Swing</a>]</li>\n <li><a href=\"#get\">Getting stuff from the web</a> [Java tutorial on <a href=\"http://docs.oracle.com/javase/tutorial/essential/io\">IO</a>]</li>\n <li><a href=\"#rest\">Web services</a></li>\n <li><a href=\"#xml\">Processing XML</a> [Java tutorials on <a href=\"http://docs.oracle.com/javase/tutorial/jaxp\">JAXP</a>, particularly <a href=\"http://docs.oracle.com/javase/tutorial/jaxp/dom\">DOM</a>]</li>\n <li><a href=\"#finished\">The finished product</a></li>\n <li><a href=\"#java\">Java notes</a></li>\n</ul>\n\n<p>All the code files for today: <a href=\"notes/21/code/FlickrSearchJSON.java\">FlickrSearchJSON.java</a>; <a href=\"notes/21/code/FlickrSearchXML.java\">FlickrSearchXML.java</a>; <a href=\"notes/21/code/FlickrSearchCore.java\">FlickrSearchCore.java</a>; <a href=\"notes/21/code/ProcessXML.java\">ProcessXML.java</a>; <br><a href=\"notes/21/code/json-simple-1.1.1.jar\">json-simple-1.1.1.jar</a>; <a href=\"notes/21/code/WWWGet.java\">WWWGet.java</a>; <a href=\"notes/21/code/WWWGetTry.java\">WWWGetTry.java</a></p>\n<p>Note: you need to download <a href=\"notes/21/code/json-simple-1.1.1.jar\">json-simple-1.1.1.jar</a> and install it as an external JAR (as you did for the opencv files) to run <a href=\"notes/21/code/FlickrSearchJSON.java\">FlickrSearchJSON.java</a>.  Otherwise you can run <a href=\"notes/21/code/FlickrSearchXML.java\">FlickrSearchXML.java</a> without installing the JAR.  The XML version does the same as the JSON version, but exchanges data with Flickr via XML instead of JSON. </p>\n\n<p><a href=\"slides/Day21.pdf\">Slides from class (Section 12 - AQL)</a></p>\n\n<p><a href=\"https://cs.dartmouth.edu/~tjp/cs10/slides/Day21.pdf\">Slides from class (Section 2 - TJP)</a></p>\n\n<h2>Graphical user interface</h2>\n\n<p>Let's start by mocking up a little GUI for the photo browser we have in mind: <a href=\"notes/21/code/FlickrSearchCore.java\">FlickrSearchCore.java</a>.  GUI construction is tedious, and best done with a GUI development environment that lets us graphically lay out the various components. So we'll just do something simple that illustrates the use of some of the components (buttons, a text field, a combo box); once you've seen these, you can pick up the rest by following the same principles.</p>\n\n<p>We've gotten away from our good old DrawingGUI, and rolled all the GUI functionality directly here. Thus the class extends JFrame, a Java class for a top-level window.</p>\n\n<p>The constructor creates a \"canvas\" as a JComponent (generic GUI component) with a method to paint itself. In this method we have to call the superclass paintComponent, and then can do whatever drawing we want to. That will eventually be to display an image, but it's blank for now. \n(In DrawingGUI, this is where I had it call the draw() method that we filled in, in different ways.) One odd thing about this creation of the canvas is that it calls \"new JComponent()\" but then has curly braces and a method definition. This is actually the combination of defining a new class that is a subclass of JComponent, and then creating an instance of that class, all at once. But we never bother to give the class a name — an anonymous class, like the anonymous functions we saw before — because we only ever need that one instance. We could have had a separate class definition in another file, say:</p>\n\n<pre><code>public class Canvas extends JComponent {\n  public void paintComponent(Graphics g) {\n    super.paintComponent(g);\n    // will add code here to draw the current image\n  }\n};</code></pre>\n<p>And then new'ed one of these. The advantage of the anonymous class (besides keeping things self-contained) is that it has access to the instance variables of the containing class. So when the whole thing is finished, we'll actually have the canvas directly access the set of images belonging to its \"parent\" FlickrSearch object; we don't have to pass them in.</p>\n\n<p>After the canvas, there's a bunch of boilerplate to set the size, pack the GUI components, make it visible, etc. If you look back at DrawingGUI, you'll see all that stuff in there. (Aren't you glad I buried it under the rug in week one?)</p>\n\n<p>The other GUI elements are created in a separate method setupGUI(). First we have a \"next\" button and a \"previous\" button that step through the photo array. While these are buttons that you press specifically, rather than just general mouse presses within the window, the mechanism is the same. Again, I buried that under the rug in week one, so that the Java mechanism just ended up calling a \"handleMousePress\" method that we could define ourselves, but this is how that works. </p>\n\n<p>In order to respond to user input, we need a way to represent the input and invoke appropriate methods. The representation is in terms of \"events\" (e.g., the event that the mouse was pressed), and a \"listener\" machinery tells the GUI what events to pay attention to, and what to do when they happen. For key presses, Java provides KeyEvent instances. For mouse motion, it provides MouseMotion. And for all other kinds of mouse stuff, Java provides MouseEvents — when a mouse button is pressed, released, or clicked (pressed and released without intevening motion), and when the mouse enters from outside the window or exits from the window. The MouseEvent object contains information about where the event happened, which button, modifiers, etc. For GUI components like buttons here, there's a catch-all ActionEvent.</p>\n\n<p>We have to tell Java what to do when it notices some such event. This is handled by a \"listener\" object that provides an appropriate method to invoke with the event. One of the cases:</p>\n\n<pre><code>prevB.addActionListener(new AbstractAction() {\n  public void actionPerformed(ActionEvent e) {\n     // go to the previous image\n  }\n});</code></pre>\n<p>This is again an anonymous class, one that extends AbstractAction and provides a method that responds to an event. Here we will again (in the final version) make use of the fact that the class is \"inside\" the FlickrSearch object and can access its instance variables. Look back at DrawingGUI to see the other types of events in action, and how they then connect to the methods you wrote.</p>\n\n<p>There's another way to provide an action listener as of Java 8: just directly pass a method (here as an anonymous function):</p>\n\n<pre><code>nextB.addActionListener(e -&gt; {\n  // will add code here to move to the next image\n  System.out.println(\"next\");\n});</code></pre>\n<p>The next GUI element is a combo box (a drop-down menu) that allows selection of how the photos should be sorted — relevance, date, or interestingness (ascending or descending). This component likewise has an action event in which we note the selected sort order. The construction is a little tricky, as we have to specify the options to put in the list. I'm using a hard-coded list of Strings.</p>\n\n<p>The textbox for the search text is simple, and the search button is set up the same way as the other buttons. Its action is somewhat more complex, as it invokes our search function loadImages() and has to catch some of the errors it might encounter.</p>\n\n<p>The key thing we have to account for with multiple components is how to lay them out. (That's what's best done graphically.) Java provides a number of different layout managers with different behaviors. We put the buttons in their panel with a \"flow layout\" that just adds them in rows, left to right, with a new row started when the next component won't fit in the current row. We then put that panel along with the canvas into the main content panel with a \"border layout\" that allows the user to put one thing at the top (NORTH), one at the bottom (SOUTH), one on the right side (EAST), one on the left side (WEST), and one in the middle (CENTER). The CENTER expands to occupy all space not used by the other four. So the button panel is at the top and the canvas in the center, taking the rest of the space.</p>\n\n<h2>Getting stuff from the web</h2>\n\n<p>At its heart, network programming is all about how to properly transfer information between computers. As we discussed briefly when we first encountered type declarations in Java, a computer only ever deals with bits, so how is any particular set of 0s and 1s to be interpreted? What does an incoming bunch of bits imply, and how do I send the appropriate outgoing bunch of bits? That's what network <em>protocols</em> are all about. With the internet, there are multiple layers of how to handle bits, to gain increasing reliability (in case of misread bits, dropped bits or entire messages, etc.). You'll have to take the networking course to get into that; here we're just going to look at a high level, provided by web-based protocols.</p>\n\n<p>A key component of the web is HTTP, the HyperText Transfer Protocol, which is a set of rules for how browsers (and other agents on your machine) communicate with web servers. For example, your browser might ask the Dartmouth web server \"<code>get /~reg/index.html</code>\"; and then the web server responds with the hypertext for that page. Your browser would then notice that there are some images referenced in there, and ask the server for them.  Note that the basic process is <em>stateless</em> (doesn't remember you from one request\nto the next). Cookies, anyone?</p>\n\n<p>The URL (Uniform Resource Locator) is the global identity of the page you want; e.g. <code>http://www.dartmouth.edu/~reg/index.html</code></p>\n<ul>\n <li><code>http:</code> — the protocol (how to obtain the document)</li>\n <li><code>www.dartmouth.edu</code> — the hostname (which machine has it)</li>\n <li><code>~reg/</code> — the path (where on that machine the document is)</li>\n <li><code>index.html</code> — the file name (if absent, often assumed to be index.html or index.html)</li>\n</ul>\n\n<p>Java provides libraries that let us get from a web server, within a program. Here's a little self-referential program that gets this page.</p>\n\n<p><a href=\"notes/21/code//WWWGet.java\">[WWWGet.java]</a></p><pre><code>import java.net.*;\nimport java.io.*;\n\npublic class WWWGet {\n\tpublic static void main(String[] args) throws Exception {\n\t\t// Open a stream reader for processing the response from the URL\n\t\tURL url = new URL(\"http://www.cs.dartmouth.edu/~albertoq/cs10/notes21.html\");\n\t\tSystem.out.println(\"*** getting \" + url);\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n\t\t// Read lines from the stream\n\t\tString line;\n\t\twhile ((line = in.readLine()) != null) {\n\t\t\tSystem.out.println(line);\n\t\t}\n\t\tin.close();\n\t\tSystem.out.println(\"*** done\");\n\t}\n}\n</code></pre>\n<p>The Reader/Stream mechanism for reading data works like we've done previously with files; the difference here is that the file is served up over the web, rather than loaded from your own machine. We create a new InputStreamReader that will get its input from the web server's response for the URL we provide.</p> \n\n<p>As with files, trying to open and read from a URL can raise exceptions. \nAn exception-handling version of our previous buck-passing program: <a href=\"notes/21/code/WWWGetTry.java\">WWWGetTry.java</a>. The handlers for the exceptions from creating the URL and the reader are at the bottom. We then have a try-within-a-try for reading (boy would Yoda be displeased — do or do not, there is no try), because we want to close the stream no matter what. Note that the stream closing itself can throw an exception, which is handled by the same catcher as for opening. Whew.</p>\n\n<h2>Web services</h2>\n\n<p>Instead of dealing with web pages, we'll be dealing with web services — when information is delivered via this same machinery. In that case, we actively engage with the server, sending it values of parameters with the input, and getting back results specific to that input. It's like a function call (and indeed some of the mechanisms make it feel even more that way). We'll be using a basic, but powerful and common mechanism, called REST (REpresentational State Transfer) that is built directly on top of the same HTTP approach we've just used for web pages.</p>\n\n<p>For example, here's a greeting program using REST:\n<a href=\"http://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=alberto\">http://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=alberto</a>. This is just a URL, extended with a parameter \"name\" whose value here is \"alberto\" (try substituting your own name, of course). Multiple such parameters can be included, separated by \nampersands (&amp;); e.g., <a href=\"http://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=alberto&amp;color=blue\">http://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=alberto&amp;color=blue</a>. This approach directly uses the \"get\" machinery already in place for fetching web pages. I'm sure you've seen parameters showing up in URLs in other contexts; can you think of a few? A more powerful, but somewhat more complicated, approach is to leverage the \"post\" machinery that is commonly used when sending form data (e.g., when ordering something from a web store). Rather than including the name/value pairs in the URL, they are sent directly afterwards via an established connection. We'll stick with the simpler \"get\" approach.</p>\n\n<p>One thing to note is that not all characters are acceptable in a URL. For example, URLs aren't supposed to include spaces. So we have to \"URL encode\" the parameter values using an encoding of such \"special characters\". A simple way to do that is with the URLEncoder class:</p>\n<pre><code>URL url = new URL(\"http://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=\"\n         + URLEncoder.encode(\"alberto quattrini li\",\"UTF-8\"));</code></pre>\n<h2>Processing XML</h2>\n\n<p>So now we've handled sending parameters to a web service; how do we get a response back that we can interpret? There are a number of approaches to encoding data in a way that a program could interpret it. One standard way is XML (eXtensible Markup Language), which is related to and much like HTML (HyperText Markup Language) in that they are both languages (sets of syntax and grammar rules) describing how to represent something. For HTML, that's hypertext; for XML, it's basically anything.</p>\n\n<p>XML represents data by wrapping it with <em>tags</em> that give some meaning to each piece. The tags can be nested, with the inner parts being components of the outer parts. A tag can also have a set of name-value <em>attributes</em> that give particular details (without going to the trouble of nesting them, since they're unique). A simple example:</p>\n<pre><code>&lt;enrollment&gt;\n &lt;course department=\"CS\" number=\"1\" term=\"18W\"&gt;\n  &lt;student name=\"Alice\" year=\"20\" /&gt;\n  &lt;student name=\"Bob\" year=\"19\" /&gt;\n  &lt;student name=\"Charlie\" year=\"18\" /&gt;\n &lt;/course&gt;\n &lt;course department=\"CS\" number=\"10\" term=\"18W\"&gt;\n  &lt;student name=\"Delilah\" year=\"19\" /&gt;\n  &lt;student name=\"Elvis\" year=\"00\" /&gt;\n  &lt;student name=\"Flora\" year=\"20\" /&gt;\n &lt;/course&gt;\n&lt;/enrollment&gt;</code></pre><p>Note that tags are enclosed with angle brackets (&lt; ... &gt;) and must come in properly nested pairs (start tag &lt;name&gt; ... end tag &lt;/name&gt;;). A start tag can include attributes. If there's nothing to be nested inside an element, the tag can be <em>self-closing</em>, with a slash at the end of the start tag: &lt;name/&gt;.</p>\n\n<p>To do something with XML, we have to know how to interpret the tags and what their relationships are to each other. That's obviously problem-specific. We're focusing here on a Flickr-based photo search application. We'll give Flickr a query describing the photos we're interested in, and it will return information about the photos that meet our criteria. The <a href=\"http://www.flickr.com/services/api/\">Flickr API documentation</a> describes the format for different types of queries; we're doing a standard <a href=\"http://www.flickr.com/services/api/explore/flickr.photos.search\">photo search</a> here. \n\n</p><p>Fortunately the XML is pretty simple. An example (from a search for Dartmouth images, of course): <a href=\"notes/21/flickr-dart.xml\">flickr-dart.xml</a> Actually, that's a hand-edited version of what Flickr gave back, as the original included an ampersand in \"Dev &amp; The Cataracs\", which is a no-no in XML. It caused me some pain when writing code to process this, and as you'll see, I just did something simple (aka \"gross hack\") to deal with it.</p>\n\n<p>So what can we do with XML? For our application, we want to actually pull down the images (we could also label them with their titles, etc., but I'll leave that for you to do on your own, if you're so interested). The <a href=\"http://www.flickr.com/services/api/misc.urls.html\">Flickr URL documentation</a> says that we can access a photo with a URL of this form:</p>\n<pre><code>http://farm{farm-id}.staticflickr.com/{server-id}/{id}_{secret}.jpg</code></pre><p>So for example, the fourth image in our XML file (Baker) has this URL:\n<a href=\"http://farm3.staticflickr.com/2622/3840099142_fb08d49e3a.jpg\">http://farm3.staticflickr.com/2622/3840099142_fb08d49e3a.jpg</a>.</p>\n<p>Let's write a program to pull the URLs from the XML file. We need an ability to read the XML file into a representation we can handle with a program. Java provides numerous XML parsing libraries. Here I'll use the document object model (DOM) approach, in which we directly build a document structure mirroring the nested structure in the XML file. (If you ever explore your HTML through a power-user tool on your browser, that's the same idea.) The DOM gives us the ability to search for elements with a specific tag name and get their attributes (among many other things; e.g., navigating the nesting structure). So we can find the photos and build the URLs from the attributes as illustrated above.</p>\n\n<p>The code: <a href=\"notes/21/code/ProcessXML.java\">ProcessXML.java</a>. Save <a href=\"notes/21/flickr-dart.xml\">flickr-dart.xml</a> in a folder called \"inputs\". We start by pulling the XML file into one big String. We read the individual lines, using the same approach we've seen before, and concatenate them together. Along the way, we replace ampersands with pluses, the gross hack I mentioned. Then there's quite a bit of boilerplate to parse the XML string, due to the power and generality of the mechanism. Finally, we piece together the URLs for the photo elements as described. I had to write an extra little piece of code to look up the attribute of a given name and return its value, just by marching down the list of attributes and seeing which one matches.</p>\n\n<h2>The finished product</h2>\n\n<p><a href=\"notes/21/code/FlickrSearch.java\">FlickrSearch.java</a> puts together all the pieces we've seen, with just a bit more to drive the search.</p>\n\n<p>The meat of the application is loadImages, which works basically the same way as our ProcessXML.java code, wrapped up in code to construct and execute the query (one such query returned the XML we used directly there) and fetch images from the URLs in the XML.</p>\n\n<p>The query specifies the various parameters to the REST query, as specified in the <a href=\"http://www.flickr.com/services/api/explore/flickr.photos.search\">photo search</a> docs on Flickr (note that you can test out the search interactively there). Here we use the textbox input as the value of \"text\" (properly URL encoded), provide the specified sort as the value of \"sort\", and limit the results to 10. To run this yourself, you'll need an API key for Flickr (as given in a final variable). I have obtained one for use in the class and have provided it on Canvas. Please limit your usage of this application to simple and appropriate searches, so that I may maintain my key. If you want to do more extensive searches yourself, it's easy to apply for a key.</p>\n\n<p>We form the image URLs using the technique we already discussed; the \"z\" at the end of the URLs indicates an image that is max 640 pixels on a side. We then use the standard Java image mechanism to pull in the images and store them in an array. </p>\n\n<h2>\n----\n\n\n<section id=section16><a href=\"#section16\">Java notes</a></section>\n</h2>\n\n<dl>\n<dt>inner class</dt>\n<dd>A class can be defined inside another class, as we saw with the elements of linked lists. There it was useful as a type of information hiding (nobody else needed the elements) and to keep things local. It can be even more useful when the inner class benefits from direct access to the outer class variables and methods.</dd>\n\n<dt>anonymous class</dt>\n<dd>An instance of an inner class can be created without giving that class a name. The superclass is named, and the extensions (additional methods and instance variables) directly coded within the \"new\" call. As an inner class, it can use the outer class variables and methods.</dd>\n</dl>\n</div></div>"},"section11":{"id":11,"length":69,"title":"<title>CS 10 | Problem solving</title>\n","overview":"Title: Processing XML\nOverview: This section discusses processing XML and its features.\n\nHighlights:\n- Introduction to processing XML\n- Features of XML processing\n- Ways to parse XML documents\n- Differences between DOM and SAX parsers\n- Examples of processing XML with Python\n- Advantages and disadvantages of processing XML.","content":"\n\n\n<section id=section6><a href=\"#reader-view6\">Processing XML</a></section>\n\n"},"section7":{"id":7,"length":110,"title":"<title>CS 10 | Problem solving</title>\n","overview":"Title: CS 10 Problem Solving: Getting Stuff from the Web\n\nOverview: This section of the CS 10 course covers the basics of getting information from the web, including how to navigate web pages and write simple programs to pull data from websites.\n\nHighlights:\n\n- Introduction to reading HTML code\n- Overview of web architectures and protocols\n- Techniques for scraping web data using Python\n- Best practices for ethical web scraping and preventing server overload\n- Discussion of real-world applications for web data, such as finance and marketing.","content":"\n\n\n<section id=section4><a href=\"#reader-view4\">Getting stuff from the web</a></section>\n\n"},"section15":{"id":15,"length":118,"title":"<title>CS 10 | Problem solving</title>\n","overview":"Title: Java Notes - An Overview\n\nOverview: This section contains important notes on Java programming language that can help improve your coding skills. The notes cover various aspects of the language and are helpful for both beginners and experienced developers.\n\nHighlights:\n- Detailed explanation of Java programming language\n- Overview of its features and capabilities\n- Includes notes on key concepts such as classes, objects, and inheritance\n- Tips for writing efficient and optimized Java code\n- Examples of common coding errors and how to avoid them\n- Useful resources for further learning and development in Java programming.","content":"\n\n\n<section id=section8><a href=\"#reader-view8\">Java notes</a></section>\n\n"},"section5":{"id":5,"length":116,"title":"<title>CS 10 | Problem solving</title>\n","overview":"Title: Graphical User Interface for CS10 Problem Solving Course\nOverview: This section of the CS10 Problem Solving course focuses on the importance of having a graphical user interface in solving problems related to computer science. It explores how graphical user interfaces can assist in creating a more user-friendly and efficient computing experience. Here are some highlights:\n \n- Definition of Graphical User Interface (GUI)\n- Importance of GUI in computer science problem solving\n- Examples of GUI applications used in problem solving\n- Guidelines for creating effective GUI design to enhance user experience.","content":"\n\n\n<section id=section3><a href=\"#reader-view3\">Graphical user interface</a></section>\n\n"},"section2":{"id":2,"length":133,"title":"<title>CS 10 | Problem solving</title>\n","overview":"Title: Utilizing Java Packages for Problem Solving in CS 10\n\nOverview: In this article, readers will explore how Java packages can aid in problem solving in CS 10. We will delve into a detailed reference from Oracle and a set of Java tutorials that provide a starting point for those seeking to enrich their knowledge.\n\nHighlights: \n\n- The use of Java packages is important for CS 10 problem-solving \n- Oracle’s detailed reference provides a wealth of information on the topic \n- Supplementary Java tutorials are available within the article \n- The tutorials offer extra insight for those seeking to deepen their knowledge.","content":"\n\n\nWe'll be using a number of different Java packages to help out. As usual, Oracle provides a detailed reference. Somewhat more useful to get going, they also provide a set of Java tutorials. I've provided links to relevant ones within the menu below. Note that they cover much more than we do, and are just provided for your reference in case you want supplementary reading.\n\n\n"},"section14":{"id":14,"length":137,"title":"<title>CS 10 | Problem solving</title>\n","overview":"Title: FlickrSearch Java App\n\nOverview: The FlickrSearch.java application utilizes various methods to construct and execute a query and fetch images from URLs specified in XML. Parameters are specified by the REST query as described in the photo search docs on Flickr. Once executed, the images are stored in an array.\n\nHighlighted points:\n\n- loadImages is the meat of the application\n- Construct and execute the query to fetch images\n- Provide parameters to REST query\n- Use the textbox input for value of \"text\", username, and limit results to 10\n- Need an API key for Flickr\n- Forming image URLs with the image mechanism in Java","content":"\n\n\nFlickrSearch.java puts together all the pieces we've seen, with just a bit more to drive the search.\n\nThe meat of the application is loadImages, which works basically the same way as our ProcessXML.java code, wrapped up in code to construct and execute the query (one such query returned the XML we used directly there) and fetch images from the URLs in the XML.\n\nThe query specifies the various parameters to the REST query, as specified in the photo search docs on Flickr (note that you can test out the search interactively there). Here we use the textbox input as the value of \"text\" (properly URL encoded), provide the specified sort as the value of \"sort\", and limit the results to 10. To run this yourself, you'll need an API key for Flickr (as given in a final variable). I have obtained one for use in the class and have provided it on Canvas. Please limit your usage of this application to simple and appropriate searches, so that I may maintain my key. If you want to do more extensive searches yourself, it's easy to apply for a key.\n\nWe form the image URLs using the technique we already discussed; the \"z\" at the end of the URLs indicates an image that is max 640 pixels on a side. We then use the standard Java image mechanism to pull in the images and store them in an array. \n\n\n"},"section8":{"id":8,"length":139,"title":"<title>CS 10 | Problem solving</title>\n","overview":"Title: Introduction to Network Programming\n\nOverview: This content introduces the concept of network programming, focusing on how computers transfer information and interpret bits. The article discusses network protocols, HTTP, and URL, as well as how Java libraries aid in obtaining data from web servers within a program. \n\nHighlights:\n\n- Network programming is about transferring information between computers;\n- A computer only deals with bits;\n- Network protocols deal with interpreting bunches of bits;\n- HTTP is a set of rules for how browsers communicate with web servers;\n- URLs provide a global identity of the web page;\n- Java provides libraries to obtain data from web servers within a program.","content":"\n\n\nAt its heart, network programming is all about how to properly transfer information between computers. As we discussed briefly when we first encountered type declarations in Java, a computer only ever deals with bits, so how is any particular set of 0s and 1s to be interpreted? What does an incoming bunch of bits imply, and how do I send the appropriate outgoing bunch of bits? That's what network protocols are all about. With the internet, there are multiple layers of how to handle bits, to gain increasing reliability (in case of misread bits, dropped bits or entire messages, etc.). You'll have to take the networking course to get into that; here we're just going to look at a high level, provided by web-based protocols.\n\nA key component of the web is HTTP, the HyperText Transfer Protocol, which is a set of rules for how browsers (and other agents on your machine) communicate with web servers. For example, your browser might ask the Dartmouth web server \"get /~reg/index.html\"; and then the web server responds with the hypertext for that page. Your browser would then notice that there are some images referenced in there, and ask the server for them.  Note that the basic process is stateless (doesn't remember you from one request\nto the next). Cookies, anyone?\n\nThe URL (Uniform Resource Locator) is the global identity of the page you want; e.g. http://www.dartmouth.edu/~reg/index.html\n\n http: — the protocol (how to obtain the document)\n www.dartmouth.edu — the hostname (which machine has it)\n ~reg/ — the path (where on that machine the document is)\n index.html — the file name (if absent, often assumed to be index.html or index.html)\n\n\nJava provides libraries that let us get from a web server, within a program. Here's a little self-referential program that gets this page.\n\n[WWWGet.java]import java.net.*;\nimport java.io.*;\n\npublic class WWWGet {\n\tpublic static void main(String[] args) throws Exception {\n\t\t// Open a stream reader for processing the response from the URL\n\t\tURL url = new URL(\"http://www.cs.dartmouth.edu/~albertoq/cs10/notes21.html\");\n\t\tSystem.out.println(\"*** getting \" + url);\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n\t\t// Read lines from the stream\n\t\tString line;\n\t\twhile ((line = in.readLine()) != null) {\n\t\t\tSystem.out.println(line);\n\t\t}\n\t\tin.close();\n\t\tSystem.out.println(\"*** done\");\n\t}\n}\n\nThe Reader/Stream mechanism for reading data works like we've done previously with files; the difference here is that the file is served up over the web, rather than loaded from your own machine. We create a new InputStreamReader that will get its input from the web server's response for the URL we provide. \n\nAs with files, trying to open and read from a URL can raise exceptions. \nAn exception-handling version of our previous buck-passing program: WWWGetTry.java. The handlers for the exceptions from creating the URL and the reader are at the bottom. We then have a try-within-a-try for reading (boy would Yoda be displeased — do or do not, there is no try), because we want to close the stream no matter what. Note that the stream closing itself can throw an exception, which is handled by the same catcher as for opening. Whew.\n\n\n"},"section3":{"id":3,"length":137,"title":"<title>CS 10 | Problem solving</title>\n","overview":"Title: CS 10 Problem Solving: An Overview\n\nOverview: The CS 10 course teaches students to solve complex problems using computing methods. The course introduces students to programming concepts and the essential skills required for sound programming practice. The course content consists of a combination of lectures, laboratory sessions, and activities designed to maximize learning outcomes.\n\nHighlights:\n\n- CS 10 is a course focused on problem-solving using computing methods\n- Programming concepts are introduced to students in the course\n- The course teaches essential skills to be used in programming practice\n- Teaching methods used for the course include lectures, labs, and activities\n- Course content is designed for maximum learning outcomes","content":"\n\n\n<section id=section2><a href=\"#reader-view2\">Outline</a></section>\n\n"},"section13":{"id":13,"length":142,"title":"<title>CS 10 | Problem solving</title>\n","overview":"Title: The Finished Product: A Guide to Completing Your Problem-Solving Task\n\nOverview: The final stage of solving a problem can be the most exciting and rewarding. However, it can also be the most daunting. This guide provides essential tips and techniques to help you achieve a successful outcome and complete your problem-solving task.\n\nHighlights:\n\n- Understand the importance of completing your task thoroughly and efficiently\n- Identify and prioritize the steps needed to complete your task\n- Use tools such as checklists and project plans to stay organized\n- Review and refine your work to ensure a high-quality finished product\n- Celebrate your success and share your solutions with others.","content":"\n\n\n<section id=section7><a href=\"#reader-view7\">The finished product</a></section>\n\n"},"section6":{"id":6,"length":149,"title":"<title>CS 10 | Problem solving</title>\n","overview":"Title: Building a Simple GUI for a Photo Browser\n\nOverview: This article outlines the process of creating a simple GUI for a photo browser using Java. It highlights the importance of GUI development environments and demonstrates the use of various components like buttons, text fields, and combo boxes. It also emphasizes the role of anonymous classes and layout managers in GUI design.\n\nHighlights:\n- GUI construction is best done with a graphical development environment\n- Anonymous classes allow for self-contained and convenient GUI design\n- MouseEvent objects enable Java to respond to various types of mouse events\n- Choosing a layout manager is crucial for effective component organization in a GUI\n- Components like buttons, text fields, and combo boxes are common in GUI design","content":"\n\n\nLet's start by mocking up a little GUI for the photo browser we have in mind: FlickrSearchCore.java.  GUI construction is tedious, and best done with a GUI development environment that lets us graphically lay out the various components. So we'll just do something simple that illustrates the use of some of the components (buttons, a text field, a combo box); once you've seen these, you can pick up the rest by following the same principles.\n\nWe've gotten away from our good old DrawingGUI, and rolled all the GUI functionality directly here. Thus the class extends JFrame, a Java class for a top-level window.\n\nThe constructor creates a \"canvas\" as a JComponent (generic GUI component) with a method to paint itself. In this method we have to call the superclass paintComponent, and then can do whatever drawing we want to. That will eventually be to display an image, but it's blank for now. \n(In DrawingGUI, this is where I had it call the draw() method that we filled in, in different ways.) One odd thing about this creation of the canvas is that it calls \"new JComponent()\" but then has curly braces and a method definition. This is actually the combination of defining a new class that is a subclass of JComponent, and then creating an instance of that class, all at once. But we never bother to give the class a name — an anonymous class, like the anonymous functions we saw before — because we only ever need that one instance. We could have had a separate class definition in another file, say:\n\npublic class Canvas extends JComponent {\n  public void paintComponent(Graphics g) {\n    super.paintComponent(g);\n    // will add code here to draw the current image\n  }\n};\nAnd then new'ed one of these. The advantage of the anonymous class (besides keeping things self-contained) is that it has access to the instance variables of the containing class. So when the whole thing is finished, we'll actually have the canvas directly access the set of images belonging to its \"parent\" FlickrSearch object; we don't have to pass them in.\n\nAfter the canvas, there's a bunch of boilerplate to set the size, pack the GUI components, make it visible, etc. If you look back at DrawingGUI, you'll see all that stuff in there. (Aren't you glad I buried it under the rug in week one?)\n\nThe other GUI elements are created in a separate method setupGUI(). First we have a \"next\" button and a \"previous\" button that step through the photo array. While these are buttons that you press specifically, rather than just general mouse presses within the window, the mechanism is the same. Again, I buried that under the rug in week one, so that the Java mechanism just ended up calling a \"handleMousePress\" method that we could define ourselves, but this is how that works. \n\nIn order to respond to user input, we need a way to represent the input and invoke appropriate methods. The representation is in terms of \"events\" (e.g., the event that the mouse was pressed), and a \"listener\" machinery tells the GUI what events to pay attention to, and what to do when they happen. For key presses, Java provides KeyEvent instances. For mouse motion, it provides MouseMotion. And for all other kinds of mouse stuff, Java provides MouseEvents — when a mouse button is pressed, released, or clicked (pressed and released without intevening motion), and when the mouse enters from outside the window or exits from the window. The MouseEvent object contains information about where the event happened, which button, modifiers, etc. For GUI components like buttons here, there's a catch-all ActionEvent.\n\nWe have to tell Java what to do when it notices some such event. This is handled by a \"listener\" object that provides an appropriate method to invoke with the event. One of the cases:\n\nprevB.addActionListener(new AbstractAction() {\n  public void actionPerformed(ActionEvent e) {\n     // go to the previous image\n  }\n});\nThis is again an anonymous class, one that extends AbstractAction and provides a method that responds to an event. Here we will again (in the final version) make use of the fact that the class is \"inside\" the FlickrSearch object and can access its instance variables. Look back at DrawingGUI to see the other types of events in action, and how they then connect to the methods you wrote.\n\nThere's another way to provide an action listener as of Java 8: just directly pass a method (here as an anonymous function):\n\nnextB.addActionListener(e -> {\n  // will add code here to move to the next image\n  System.out.println(\"next\");\n});\nThe next GUI element is a combo box (a drop-down menu) that allows selection of how the photos should be sorted — relevance, date, or interestingness (ascending or descending). This component likewise has an action event in which we note the selected sort order. The construction is a little tricky, as we have to specify the options to put in the list. I'm using a hard-coded list of Strings.\n\nThe textbox for the search text is simple, and the search button is set up the same way as the other buttons. Its action is somewhat more complex, as it invokes our search function loadImages() and has to catch some of the errors it might encounter.\n\nThe key thing we have to account for with multiple components is how to lay them out. (That's what's best done graphically.) Java provides a number of different layout managers with different behaviors. We put the buttons in their panel with a \"flow layout\" that just adds them in rows, left to right, with a new row started when the next component won't fit in the current row. We then put that panel along with the canvas into the main content panel with a \"border layout\" that allows the user to put one thing at the top (NORTH), one at the bottom (SOUTH), one on the right side (EAST), one on the left side (WEST), and one in the middle (CENTER). The CENTER expands to occupy all space not used by the other four. So the button panel is at the top and the canvas in the center, taking the rest of the space.\n\n\n"},"section1":{"id":1,"length":145,"title":"<title>CS 10 | Problem solving</title>\n","overview":"Title: Web Services and Processing Data from Web Servers\n\nOverview: This section of CS 10 introduces learners to the world of web services, where multiple machines work together to resolve problems. The focus is on obtaining and processing data from web servers using a query interface for Flickr. The lesson covers how to send and process queries and using graphical user interface (GUI) for a better user experience.\n\nHighlights:\n- Introduction to web services in CS 10\n- Exploring the process of obtaining and processing data from web servers\n- Building a simple query interface for Flickr in the lesson\n- Coverage of sending and processing queries\n- Learning how to use graphical user interface (GUI) for a better user experience.","content":"\n\n\n<section id=section1><a href=\"#reader-view1\">Web services</a></section>\n So far we've been dealing with the world as it exists on our individual computers. But a lot of exciting problems arise in the context of having multiple machines work together on something. We'll get a taste of such approaches in the upcoming week, starting today with the basic question of how to obtain and process data from web servers. Our goal is to build a simple query interface for Flickr; we'll cover how to send and process queries, and how to use a graphical user interface (GUI) to provide a somewhat nicer interface than we have seen.\n"},"section16":{"id":16,"length":165,"title":"<title>CS 10 | Problem solving</title>\n","overview":"Title: Inner and Anonymous Classes in Java Programming\n\nOverview:\nInner and anonymous classes are unique forms of class definitions in Java that offer increased information hiding and local access to variables and methods. Inner classes can be defined inside another class, while anonymous classes allow for the creation of instances of inner classes without naming them. Both concepts offer distinct advantages and can be valuable tools in Java programming.\n\nHighlights:\n- Inner classes can be defined inside another class, providing benefits for information hiding and local access.\n- Inner classes grant direct access to outer class variables and methods.\n- Anonymous classes can be created as instances of inner classes without naming them.\n- Anonymous classes use the outer class variables and methods, similar to inner classes.\n- Both inner and anonymous classes offer unique advantages for Java programming.","content":"\n\n\n\ninner class\nA class can be defined inside another class, as we saw with the elements of linked lists. There it was useful as a type of information hiding (nobody else needed the elements) and to keep things local. It can be even more useful when the inner class benefits from direct access to the outer class variables and methods.\n\nanonymous class\nAn instance of an inner class can be created without giving that class a name. The superclass is named, and the extensions (additional methods and instance variables) directly coded within the \"new\" call. As an inner class, it can use the outer class variables and methods.\n\n"},"section9":{"id":9,"length":169,"title":"<title>CS 10 | Problem solving</title>\n","overview":"Title: CS 10 Web Services Overview\n\nOverview: This article provides a brief overview of web services and their use in modern computer programming. It explores the different types of web services and their various applications.\n\n- Web services allow for standardized communication between software applications\n- They are platform-independent and can be used across different programming languages\n- Web services can take various forms such as XML-RPC, JSON-RPC, and SOAP\n- Applications of web services include, but are not limited to, e-commerce, payment processing, and data sharing\n- API is a popular interface for web services\n- Developers need to be mindful of possible security risks when using web services\n\nOverall, web services have become an integral component of modern software development due to their ability to provide interoperability between different platforms and systems.","content":"\n\n\n<section id=section5><a href=\"#reader-view5\">Web services</a></section>\n\n"},"section10":{"id":10,"length":185,"title":"<title>CS 10 | Problem solving</title>\n","overview":"Title: Introduction to using REST for web services\n\nOverview: This paragraph explains how we can use web services to transfer information from a server using a basic but powerful mechanism called REST. It also gives an example of how to create a greeting program using REST, explains the use of parameters in a URL, and the need to encode special characters.\n\nHighlights:\n- Using web services to transfer information from a server is accomplished via REST.\n- REST is a powerful and common mechanism built on top of HTTP.\n- Parameters (name-value pairs) can be included in a URL to provide context for the input.\n- \"Get\" is a simple approach that works well to fetch web pages or results from services.\n- The simpler \"get\" approach is recommended over the more powerful \"post\" approach.\n- Proper encoding of special characters in parameter values is essential to ensure URLs work correctly.","content":"\n\n\nInstead of dealing with web pages, we'll be dealing with web services — when information is delivered via this same machinery. In that case, we actively engage with the server, sending it values of parameters with the input, and getting back results specific to that input. It's like a function call (and indeed some of the mechanisms make it feel even more that way). We'll be using a basic, but powerful and common mechanism, called REST (REpresentational State Transfer) that is built directly on top of the same HTTP approach we've just used for web pages.\n\nFor example, here's a greeting program using REST:\nhttp://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=alberto. This is just a URL, extended with a parameter \"name\" whose value here is \"alberto\" (try substituting your own name, of course). Multiple such parameters can be included, separated by \nampersands (&); e.g., http://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=alberto&color=blue. This approach directly uses the \"get\" machinery already in place for fetching web pages. I'm sure you've seen parameters showing up in URLs in other contexts; can you think of a few? A more powerful, but somewhat more complicated, approach is to leverage the \"post\" machinery that is commonly used when sending form data (e.g., when ordering something from a web store). Rather than including the name/value pairs in the URL, they are sent directly afterwards via an established connection. We'll stick with the simpler \"get\" approach.\n\nOne thing to note is that not all characters are acceptable in a URL. For example, URLs aren't supposed to include spaces. So we have to \"URL encode\" the parameter values using an encoding of such \"special characters\". A simple way to do that is with the URLEncoder class:\nURL url = new URL(\"http://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=\"\n         + URLEncoder.encode(\"alberto quattrini li\",\"UTF-8\"));\n\n"},"section4":{"id":4,"length":206,"title":"<title>CS 10 | Problem solving</title>\n","overview":"Title: Java Tutorials on Graphical User Interface and Web Data Processing\nOverview: This section covers Java tutorials on Graphical User Interface, Web Data Processing, Web Services, and Processing XML. It also includes a list of all code files and slides from class for reference.\n\nHighlights:\n\n- Java tutorials on Swing for Graphical User Interface\n- Java tutorial on IO for getting data from the web\n- Web Services for exchanging data over the web\n- Java tutorials on JAXP, particularly DOM, for processing XML\n- Code files for FlickrSearchJSON.java, FlickrSearchXML.java, FlickrSearchCore.java, ProcessXML.java, json-simple-1.1.1.jar, WWWGet.java, and WWWGetTry.java\n- Note on downloading json-simple-1.1.1.jar as an external JAR to run FlickrSearchJSON.java\n- Slides from class on AQL and TJP for reference","content":"\n\n\n Graphical user interface [Java tutorials on Swing]\n Getting stuff from the web [Java tutorial on IO]\n Web services\n Processing XML [Java tutorials on JAXP, particularly DOM]\n The finished product\n Java notes\n\n\nAll the code files for today: FlickrSearchJSON.java; FlickrSearchXML.java; FlickrSearchCore.java; ProcessXML.java; json-simple-1.1.1.jar; WWWGet.java; WWWGetTry.java\nNote: you need to download json-simple-1.1.1.jar and install it as an external JAR (as you did for the opencv files) to run FlickrSearchJSON.java.  Otherwise you can run FlickrSearchXML.java without installing the JAR.  The XML version does the same as the JSON version, but exchanges data with Flickr via XML instead of JSON. \n\nSlides from class (Section 12 - AQL)\n\nSlides from class (Section 2 - TJP)\n\n\n"},"section12":{"id":12,"length":215,"title":"<title>CS 10 | Problem solving</title>\n","overview":"Title: Introduction to XML and Parsing in Java\n\nOverview: This material focuses on handling XML data and how to interpret various tags while using Java DOM. It also includes writing a program to pull URLs from an XML file.\n\nHighlights:\n- XML is a standard way to encode data that a program can interpret using tags\n- Tags can be nested, and have name-value attributes that give particular details\n- To do something with XML, we have to know how to interpret the tags and what the relationships are to each other\n- Flickr-based photo search application is used as an example to describe processing of XML data in Java\n- Document Object Model (DOM) is used to build a structure mirroring nested structure in the XML file, and search for elements with specific tag names and get their attributes\n- XML parsing in Java includes reading the XML file into one big String, replacing ampersands with pluses, also includes boilerplate code to parse the XML string and finally piecing together the URLs for the photo elements using attribute values.","content":"\n\n\nSo now we've handled sending parameters to a web service; how do we get a response back that we can interpret? There are a number of approaches to encoding data in a way that a program could interpret it. One standard way is XML (eXtensible Markup Language), which is related to and much like HTML (HyperText Markup Language) in that they are both languages (sets of syntax and grammar rules) describing how to represent something. For HTML, that's hypertext; for XML, it's basically anything.\n\nXML represents data by wrapping it with tags that give some meaning to each piece. The tags can be nested, with the inner parts being components of the outer parts. A tag can also have a set of name-value attributes that give particular details (without going to the trouble of nesting them, since they're unique). A simple example:\n<enrollment>\n <course department=\"CS\" number=\"1\" term=\"18W\">\n  <student name=\"Alice\" year=\"20\" />\n  <student name=\"Bob\" year=\"19\" />\n  <student name=\"Charlie\" year=\"18\" />\n </course>\n <course department=\"CS\" number=\"10\" term=\"18W\">\n  <student name=\"Delilah\" year=\"19\" />\n  <student name=\"Elvis\" year=\"00\" />\n  <student name=\"Flora\" year=\"20\" />\n </course>\n</enrollment>Note that tags are enclosed with angle brackets (< ... >) and must come in properly nested pairs (start tag <name> ... end tag </name>;). A start tag can include attributes. If there's nothing to be nested inside an element, the tag can be self-closing, with a slash at the end of the start tag: <name/>.\n\nTo do something with XML, we have to know how to interpret the tags and what their relationships are to each other. That's obviously problem-specific. We're focusing here on a Flickr-based photo search application. We'll give Flickr a query describing the photos we're interested in, and it will return information about the photos that meet our criteria. The Flickr API documentation describes the format for different types of queries; we're doing a standard photo search here. \n\nFortunately the XML is pretty simple. An example (from a search for Dartmouth images, of course): flickr-dart.xml Actually, that's a hand-edited version of what Flickr gave back, as the original included an ampersand in \"Dev & The Cataracs\", which is a no-no in XML. It caused me some pain when writing code to process this, and as you'll see, I just did something simple (aka \"gross hack\") to deal with it.\n\nSo what can we do with XML? For our application, we want to actually pull down the images (we could also label them with their titles, etc., but I'll leave that for you to do on your own, if you're so interested). The Flickr URL documentation says that we can access a photo with a URL of this form:\nhttp://farm{farm-id}.staticflickr.com/{server-id}/{id}_{secret}.jpgSo for example, the fourth image in our XML file (Baker) has this URL:\nhttp://farm3.staticflickr.com/2622/3840099142_fb08d49e3a.jpg.\nLet's write a program to pull the URLs from the XML file. We need an ability to read the XML file into a representation we can handle with a program. Java provides numerous XML parsing libraries. Here I'll use the document object model (DOM) approach, in which we directly build a document structure mirroring the nested structure in the XML file. (If you ever explore your HTML through a power-user tool on your browser, that's the same idea.) The DOM gives us the ability to search for elements with a specific tag name and get their attributes (among many other things; e.g., navigating the nesting structure). So we can find the photos and build the URLs from the attributes as illustrated above.\n\nThe code: ProcessXML.java. Save flickr-dart.xml in a folder called \"inputs\". We start by pulling the XML file into one big String. We read the individual lines, using the same approach we've seen before, and concatenate them together. Along the way, we replace ampersands with pluses, the gross hack I mentioned. Then there's quite a bit of boilerplate to parse the XML string, due to the power and generality of the mechanism. Finally, we piece together the URLs for the photo elements as described. I had to write an extra little piece of code to look up the attribute of a given name and return its value, just by marching down the list of attributes and seeing which one matches.\n\n\n"}}