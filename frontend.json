{"general":{"title":"<title>CS 10 | Problem solving</title>\n","num_sections":17,"overview":"Here's a summary of each article:\n\n1. \"Using Java Packages for Problem Solving\": This article discusses various Java packages used for problem-solving in programming, and provides useful resources for learning.\n\n2. \"Web Services and Query Interface for Flickr\": This article explains how to obtain and process data from web servers, specifically Flickr, and how to build a simple query interface with a GUI.\n\n3. \"Getting Stuff from the Web\": This article provides an introduction to retrieving web content and web scraping, discussing HTML parsing, the use of BeautifulSoup, and web scraping with Python.\n\n4. \"Java Notes for CS 10\": This article offers notes on Java programming for CS 10, covering Java basics, object-oriented programming concepts, exception handling, input/output, and GUI programming.\n\n5. \"Overview of the Finished Product in Problem Solving\": This article provides insight into the final stages of problem-solving and discusses strategies for evaluating and refining solutions.\n\n6. \"Graphical User Interface (GUI)\": This article defines GUI programming and discusses commonly used programming libraries for creating GUIs in Python.\n\n7. \"FlickrSearch.java - Simple Photo Search Tool\": This article highlights FlickrSearch.java, a tool used to search for photos with a simple query setup and execution process.\n\n8. \"Inner and Anonymous Classes in Java\": This article explains how Java classes can be defined inside other classes for encapsulation, organization, and direct access to outer class variables and methods.\n\n9. \"CS 10 - Problem Solving Course Overview and Outline\": This article gives an overview of the CS 10 course, focused on developing problem-solving skills with a computer science perspective.\n\n10. \"Graphical User Interface (GUI) Construction in Java\": This article discusses constructing a GUI for a photo browser in Java, including creating an instance of an anonymous class, handling user input events, and using layout managers.\n\n11. \"Processing XML: How to Handle Your Data\": This article covers the basics of processing XML data, including parsing, libraries, manipulating, and common uses for web services, APIs, and config files.\n\n12. \"Java Tutorials on Graphical User Interface and Web Services\": This article is a collection of Java tutorials on GUI applications, IO, web services, and XML processing.\n\n13. \"Using Basic REST Mechanism for Web Services\": This article discusses REST mechanism for web services, with examples of a greeting program and encoding classes for output parameters.\n\n14. \"Handling XML Data in Java\": This article focuses on handling XML data in Java for encoding, interpretation, and retrieval, with a simple example of a Flickr-based photo search application.\n\n15. \"Web Services – An Overview\": This article introduces web services as a means of communication between applications over the internet, including protocols, APIs, and scalability.\n\n16. \"Introduction to Network Programming and HTTP Protocol\": This article explains network programming and the HTTP protocol, including rules for communication between browsers and web servers, Java libraries, and example programs.","resultHtml":"<title>CS 10 | Problem solving</title>\n<div id=\"readability-page-1\" class=\"page\"><div id=\"content\">\n<h2 id=\"notetitle\" section id=reader-view1><a href=\"#section1\">Web services</a></h2> <p>So far we've been dealing with the world as it exists on our individual computers. But a lot of exciting problems arise in the context of having multiple machines work together on something. We'll get a taste of such approaches in the upcoming week, starting today with the basic question of how to obtain and process data from web servers. Our goal is to build a simple query interface for <a href=\"http://www.flickr.com/\">Flickr</a>; we'll cover how to send and process queries, and how to use a graphical user interface (GUI) to provide a somewhat nicer interface than we have seen.</p>\n\n<p>We'll be using a number of different Java packages to help out. As usual, Oracle provides a detailed reference. Somewhat more useful to get going, they also provide a set of <a href=\"http://docs.oracle.com/javase/tutorial/index.html\">Java tutorials</a>. I've provided links to relevant ones within the menu below. Note that they cover much more than we do, and are just provided for your reference in case you want supplementary reading.</p>\n\n<h3 section id=reader-view2><a href=\"#section2\">Outline</a></h3>\n<ul>\n <li><a href=\"#gui\">Graphical user interface</a> [Java tutorials on <a href=\"http://docs.oracle.com/javase/tutorial/uiswing\">Swing</a>]</li>\n <li><a href=\"#get\">Getting stuff from the web</a> [Java tutorial on <a href=\"http://docs.oracle.com/javase/tutorial/essential/io\">IO</a>]</li>\n <li><a href=\"#rest\">Web services</a></li>\n <li><a href=\"#xml\">Processing XML</a> [Java tutorials on <a href=\"http://docs.oracle.com/javase/tutorial/jaxp\">JAXP</a>, particularly <a href=\"http://docs.oracle.com/javase/tutorial/jaxp/dom\">DOM</a>]</li>\n <li><a href=\"#finished\">The finished product</a></li>\n <li><a href=\"#java\">Java notes</a></li>\n</ul>\n\n<p>All the code files for today: <a href=\"notes/21/code/FlickrSearchJSON.java\">FlickrSearchJSON.java</a>; <a href=\"notes/21/code/FlickrSearchXML.java\">FlickrSearchXML.java</a>; <a href=\"notes/21/code/FlickrSearchCore.java\">FlickrSearchCore.java</a>; <a href=\"notes/21/code/ProcessXML.java\">ProcessXML.java</a>; <br><a href=\"notes/21/code/json-simple-1.1.1.jar\">json-simple-1.1.1.jar</a>; <a href=\"notes/21/code/WWWGet.java\">WWWGet.java</a>; <a href=\"notes/21/code/WWWGetTry.java\">WWWGetTry.java</a></p>\n<p>Note: you need to download <a href=\"notes/21/code/json-simple-1.1.1.jar\">json-simple-1.1.1.jar</a> and install it as an external JAR (as you did for the opencv files) to run <a href=\"notes/21/code/FlickrSearchJSON.java\">FlickrSearchJSON.java</a>.  Otherwise you can run <a href=\"notes/21/code/FlickrSearchXML.java\">FlickrSearchXML.java</a> without installing the JAR.  The XML version does the same as the JSON version, but exchanges data with Flickr via XML instead of JSON. </p>\n\n<p><a href=\"slides/Day21.pdf\">Slides from class (Section 12 - AQL)</a></p>\n\n<p><a href=\"https://cs.dartmouth.edu/~tjp/cs10/slides/Day21.pdf\">Slides from class (Section 2 - TJP)</a></p>\n\n<h2 section id=reader-view3><a href=\"#section3\">Graphical user interface</a></h2>\n\n<p>Let's start by mocking up a little GUI for the photo browser we have in mind: <a href=\"notes/21/code/FlickrSearchCore.java\">FlickrSearchCore.java</a>.  GUI construction is tedious, and best done with a GUI development environment that lets us graphically lay out the various components. So we'll just do something simple that illustrates the use of some of the components (buttons, a text field, a combo box); once you've seen these, you can pick up the rest by following the same principles.</p>\n\n<p>We've gotten away from our good old DrawingGUI, and rolled all the GUI functionality directly here. Thus the class extends JFrame, a Java class for a top-level window.</p>\n\n<p>The constructor creates a \"canvas\" as a JComponent (generic GUI component) with a method to paint itself. In this method we have to call the superclass paintComponent, and then can do whatever drawing we want to. That will eventually be to display an image, but it's blank for now. \n(In DrawingGUI, this is where I had it call the draw() method that we filled in, in different ways.) One odd thing about this creation of the canvas is that it calls \"new JComponent()\" but then has curly braces and a method definition. This is actually the combination of defining a new class that is a subclass of JComponent, and then creating an instance of that class, all at once. But we never bother to give the class a name — an anonymous class, like the anonymous functions we saw before — because we only ever need that one instance. We could have had a separate class definition in another file, say:</p>\n\n<pre><code>public class Canvas extends JComponent {\n  public void paintComponent(Graphics g) {\n    super.paintComponent(g);\n    // will add code here to draw the current image\n  }\n};</code></pre>\n<p>And then new'ed one of these. The advantage of the anonymous class (besides keeping things self-contained) is that it has access to the instance variables of the containing class. So when the whole thing is finished, we'll actually have the canvas directly access the set of images belonging to its \"parent\" FlickrSearch object; we don't have to pass them in.</p>\n\n<p>After the canvas, there's a bunch of boilerplate to set the size, pack the GUI components, make it visible, etc. If you look back at DrawingGUI, you'll see all that stuff in there. (Aren't you glad I buried it under the rug in week one?)</p>\n\n<p>The other GUI elements are created in a separate method setupGUI(). First we have a \"next\" button and a \"previous\" button that step through the photo array. While these are buttons that you press specifically, rather than just general mouse presses within the window, the mechanism is the same. Again, I buried that under the rug in week one, so that the Java mechanism just ended up calling a \"handleMousePress\" method that we could define ourselves, but this is how that works. </p>\n\n<p>In order to respond to user input, we need a way to represent the input and invoke appropriate methods. The representation is in terms of \"events\" (e.g., the event that the mouse was pressed), and a \"listener\" machinery tells the GUI what events to pay attention to, and what to do when they happen. For key presses, Java provides KeyEvent instances. For mouse motion, it provides MouseMotion. And for all other kinds of mouse stuff, Java provides MouseEvents — when a mouse button is pressed, released, or clicked (pressed and released without intevening motion), and when the mouse enters from outside the window or exits from the window. The MouseEvent object contains information about where the event happened, which button, modifiers, etc. For GUI components like buttons here, there's a catch-all ActionEvent.</p>\n\n<p>We have to tell Java what to do when it notices some such event. This is handled by a \"listener\" object that provides an appropriate method to invoke with the event. One of the cases:</p>\n\n<pre><code>prevB.addActionListener(new AbstractAction() {\n  public void actionPerformed(ActionEvent e) {\n     // go to the previous image\n  }\n});</code></pre>\n<p>This is again an anonymous class, one that extends AbstractAction and provides a method that responds to an event. Here we will again (in the final version) make use of the fact that the class is \"inside\" the FlickrSearch object and can access its instance variables. Look back at DrawingGUI to see the other types of events in action, and how they then connect to the methods you wrote.</p>\n\n<p>There's another way to provide an action listener as of Java 8: just directly pass a method (here as an anonymous function):</p>\n\n<pre><code>nextB.addActionListener(e -&gt; {\n  // will add code here to move to the next image\n  System.out.println(\"next\");\n});</code></pre>\n<p>The next GUI element is a combo box (a drop-down menu) that allows selection of how the photos should be sorted — relevance, date, or interestingness (ascending or descending). This component likewise has an action event in which we note the selected sort order. The construction is a little tricky, as we have to specify the options to put in the list. I'm using a hard-coded list of Strings.</p>\n\n<p>The textbox for the search text is simple, and the search button is set up the same way as the other buttons. Its action is somewhat more complex, as it invokes our search function loadImages() and has to catch some of the errors it might encounter.</p>\n\n<p>The key thing we have to account for with multiple components is how to lay them out. (That's what's best done graphically.) Java provides a number of different layout managers with different behaviors. We put the buttons in their panel with a \"flow layout\" that just adds them in rows, left to right, with a new row started when the next component won't fit in the current row. We then put that panel along with the canvas into the main content panel with a \"border layout\" that allows the user to put one thing at the top (NORTH), one at the bottom (SOUTH), one on the right side (EAST), one on the left side (WEST), and one in the middle (CENTER). The CENTER expands to occupy all space not used by the other four. So the button panel is at the top and the canvas in the center, taking the rest of the space.</p>\n\n<h2 section id=reader-view4><a href=\"#section4\">Getting stuff from the web</a></h2>\n\n<p>At its heart, network programming is all about how to properly transfer information between computers. As we discussed briefly when we first encountered type declarations in Java, a computer only ever deals with bits, so how is any particular set of 0s and 1s to be interpreted? What does an incoming bunch of bits imply, and how do I send the appropriate outgoing bunch of bits? That's what network <em>protocols</em> are all about. With the internet, there are multiple layers of how to handle bits, to gain increasing reliability (in case of misread bits, dropped bits or entire messages, etc.). You'll have to take the networking course to get into that; here we're just going to look at a high level, provided by web-based protocols.</p>\n\n<p>A key component of the web is HTTP, the HyperText Transfer Protocol, which is a set of rules for how browsers (and other agents on your machine) communicate with web servers. For example, your browser might ask the Dartmouth web server \"<code>get /~reg/index.html</code>\"; and then the web server responds with the hypertext for that page. Your browser would then notice that there are some images referenced in there, and ask the server for them.  Note that the basic process is <em>stateless</em> (doesn't remember you from one request\nto the next). Cookies, anyone?</p>\n\n<p>The URL (Uniform Resource Locator) is the global identity of the page you want; e.g. <code>http://www.dartmouth.edu/~reg/index.html</code></p>\n<ul>\n <li><code>http:</code> — the protocol (how to obtain the document)</li>\n <li><code>www.dartmouth.edu</code> — the hostname (which machine has it)</li>\n <li><code>~reg/</code> — the path (where on that machine the document is)</li>\n <li><code>index.html</code> — the file name (if absent, often assumed to be index.html or index.html)</li>\n</ul>\n\n<p>Java provides libraries that let us get from a web server, within a program. Here's a little self-referential program that gets this page.</p>\n\n<p><a href=\"notes/21/code//WWWGet.java\">[WWWGet.java]</a></p><pre><code>import java.net.*;\nimport java.io.*;\n\npublic class WWWGet {\n\tpublic static void main(String[] args) throws Exception {\n\t\t// Open a stream reader for processing the response from the URL\n\t\tURL url = new URL(\"http://www.cs.dartmouth.edu/~albertoq/cs10/notes21.html\");\n\t\tSystem.out.println(\"*** getting \" + url);\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n\t\t// Read lines from the stream\n\t\tString line;\n\t\twhile ((line = in.readLine()) != null) {\n\t\t\tSystem.out.println(line);\n\t\t}\n\t\tin.close();\n\t\tSystem.out.println(\"*** done\");\n\t}\n}\n</code></pre>\n<p>The Reader/Stream mechanism for reading data works like we've done previously with files; the difference here is that the file is served up over the web, rather than loaded from your own machine. We create a new InputStreamReader that will get its input from the web server's response for the URL we provide.</p> \n\n<p>As with files, trying to open and read from a URL can raise exceptions. \nAn exception-handling version of our previous buck-passing program: <a href=\"notes/21/code/WWWGetTry.java\">WWWGetTry.java</a>. The handlers for the exceptions from creating the URL and the reader are at the bottom. We then have a try-within-a-try for reading (boy would Yoda be displeased — do or do not, there is no try), because we want to close the stream no matter what. Note that the stream closing itself can throw an exception, which is handled by the same catcher as for opening. Whew.</p>\n\n<h2 section id=reader-view5><a href=\"#section5\">Web services</a></h2>\n\n<p>Instead of dealing with web pages, we'll be dealing with web services — when information is delivered via this same machinery. In that case, we actively engage with the server, sending it values of parameters with the input, and getting back results specific to that input. It's like a function call (and indeed some of the mechanisms make it feel even more that way). We'll be using a basic, but powerful and common mechanism, called REST (REpresentational State Transfer) that is built directly on top of the same HTTP approach we've just used for web pages.</p>\n\n<p>For example, here's a greeting program using REST:\n<a href=\"http://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=alberto\">http://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=alberto</a>. This is just a URL, extended with a parameter \"name\" whose value here is \"alberto\" (try substituting your own name, of course). Multiple such parameters can be included, separated by \nampersands (&amp;); e.g., <a href=\"http://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=alberto&amp;color=blue\">http://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=alberto&amp;color=blue</a>. This approach directly uses the \"get\" machinery already in place for fetching web pages. I'm sure you've seen parameters showing up in URLs in other contexts; can you think of a few? A more powerful, but somewhat more complicated, approach is to leverage the \"post\" machinery that is commonly used when sending form data (e.g., when ordering something from a web store). Rather than including the name/value pairs in the URL, they are sent directly afterwards via an established connection. We'll stick with the simpler \"get\" approach.</p>\n\n<p>One thing to note is that not all characters are acceptable in a URL. For example, URLs aren't supposed to include spaces. So we have to \"URL encode\" the parameter values using an encoding of such \"special characters\". A simple way to do that is with the URLEncoder class:</p>\n<pre><code>URL url = new URL(\"http://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=\"\n         + URLEncoder.encode(\"alberto quattrini li\",\"UTF-8\"));</code></pre>\n<h2 section id=reader-view6><a href=\"#section6\">Processing XML</a></h2>\n\n<p>So now we've handled sending parameters to a web service; how do we get a response back that we can interpret? There are a number of approaches to encoding data in a way that a program could interpret it. One standard way is XML (eXtensible Markup Language), which is related to and much like HTML (HyperText Markup Language) in that they are both languages (sets of syntax and grammar rules) describing how to represent something. For HTML, that's hypertext; for XML, it's basically anything.</p>\n\n<p>XML represents data by wrapping it with <em>tags</em> that give some meaning to each piece. The tags can be nested, with the inner parts being components of the outer parts. A tag can also have a set of name-value <em>attributes</em> that give particular details (without going to the trouble of nesting them, since they're unique). A simple example:</p>\n<pre><code>&lt;enrollment&gt;\n &lt;course department=\"CS\" number=\"1\" term=\"18W\"&gt;\n  &lt;student name=\"Alice\" year=\"20\" /&gt;\n  &lt;student name=\"Bob\" year=\"19\" /&gt;\n  &lt;student name=\"Charlie\" year=\"18\" /&gt;\n &lt;/course&gt;\n &lt;course department=\"CS\" number=\"10\" term=\"18W\"&gt;\n  &lt;student name=\"Delilah\" year=\"19\" /&gt;\n  &lt;student name=\"Elvis\" year=\"00\" /&gt;\n  &lt;student name=\"Flora\" year=\"20\" /&gt;\n &lt;/course&gt;\n&lt;/enrollment&gt;</code></pre><p>Note that tags are enclosed with angle brackets (&lt; ... &gt;) and must come in properly nested pairs (start tag &lt;name&gt; ... end tag &lt;/name&gt;;). A start tag can include attributes. If there's nothing to be nested inside an element, the tag can be <em>self-closing</em>, with a slash at the end of the start tag: &lt;name/&gt;.</p>\n\n<p>To do something with XML, we have to know how to interpret the tags and what their relationships are to each other. That's obviously problem-specific. We're focusing here on a Flickr-based photo search application. We'll give Flickr a query describing the photos we're interested in, and it will return information about the photos that meet our criteria. The <a href=\"http://www.flickr.com/services/api/\">Flickr API documentation</a> describes the format for different types of queries; we're doing a standard <a href=\"http://www.flickr.com/services/api/explore/flickr.photos.search\">photo search</a> here. \n\n</p><p>Fortunately the XML is pretty simple. An example (from a search for Dartmouth images, of course): <a href=\"notes/21/flickr-dart.xml\">flickr-dart.xml</a> Actually, that's a hand-edited version of what Flickr gave back, as the original included an ampersand in \"Dev &amp; The Cataracs\", which is a no-no in XML. It caused me some pain when writing code to process this, and as you'll see, I just did something simple (aka \"gross hack\") to deal with it.</p>\n\n<p>So what can we do with XML? For our application, we want to actually pull down the images (we could also label them with their titles, etc., but I'll leave that for you to do on your own, if you're so interested). The <a href=\"http://www.flickr.com/services/api/misc.urls.html\">Flickr URL documentation</a> says that we can access a photo with a URL of this form:</p>\n<pre><code>http://farm{farm-id}.staticflickr.com/{server-id}/{id}_{secret}.jpg</code></pre><p>So for example, the fourth image in our XML file (Baker) has this URL:\n<a href=\"http://farm3.staticflickr.com/2622/3840099142_fb08d49e3a.jpg\">http://farm3.staticflickr.com/2622/3840099142_fb08d49e3a.jpg</a>.</p>\n<p>Let's write a program to pull the URLs from the XML file. We need an ability to read the XML file into a representation we can handle with a program. Java provides numerous XML parsing libraries. Here I'll use the document object model (DOM) approach, in which we directly build a document structure mirroring the nested structure in the XML file. (If you ever explore your HTML through a power-user tool on your browser, that's the same idea.) The DOM gives us the ability to search for elements with a specific tag name and get their attributes (among many other things; e.g., navigating the nesting structure). So we can find the photos and build the URLs from the attributes as illustrated above.</p>\n\n<p>The code: <a href=\"notes/21/code/ProcessXML.java\">ProcessXML.java</a>. Save <a href=\"notes/21/flickr-dart.xml\">flickr-dart.xml</a> in a folder called \"inputs\". We start by pulling the XML file into one big String. We read the individual lines, using the same approach we've seen before, and concatenate them together. Along the way, we replace ampersands with pluses, the gross hack I mentioned. Then there's quite a bit of boilerplate to parse the XML string, due to the power and generality of the mechanism. Finally, we piece together the URLs for the photo elements as described. I had to write an extra little piece of code to look up the attribute of a given name and return its value, just by marching down the list of attributes and seeing which one matches.</p>\n\n<h2 section id=reader-view7><a href=\"#section7\">The finished product</a></h2>\n\n<p><a href=\"notes/21/code/FlickrSearch.java\">FlickrSearch.java</a> puts together all the pieces we've seen, with just a bit more to drive the search.</p>\n\n<p>The meat of the application is loadImages, which works basically the same way as our ProcessXML.java code, wrapped up in code to construct and execute the query (one such query returned the XML we used directly there) and fetch images from the URLs in the XML.</p>\n\n<p>The query specifies the various parameters to the REST query, as specified in the <a href=\"http://www.flickr.com/services/api/explore/flickr.photos.search\">photo search</a> docs on Flickr (note that you can test out the search interactively there). Here we use the textbox input as the value of \"text\" (properly URL encoded), provide the specified sort as the value of \"sort\", and limit the results to 10. To run this yourself, you'll need an API key for Flickr (as given in a final variable). I have obtained one for use in the class and have provided it on Canvas. Please limit your usage of this application to simple and appropriate searches, so that I may maintain my key. If you want to do more extensive searches yourself, it's easy to apply for a key.</p>\n\n<p>We form the image URLs using the technique we already discussed; the \"z\" at the end of the URLs indicates an image that is max 640 pixels on a side. We then use the standard Java image mechanism to pull in the images and store them in an array. </p>\n\n<h2 section id=reader-view8><a href=\"#section8\">Java notes</a></h2>\n\n<dl>\n<dt>inner class</dt>\n<dd>A class can be defined inside another class, as we saw with the elements of linked lists. There it was useful as a type of information hiding (nobody else needed the elements) and to keep things local. It can be even more useful when the inner class benefits from direct access to the outer class variables and methods.</dd>\n\n<dt>anonymous class</dt>\n<dd>An instance of an inner class can be created without giving that class a name. The superclass is named, and the extensions (additional methods and instance variables) directly coded within the \"new\" call. As an inner class, it can use the outer class variables and methods.</dd>\n</dl>\n</div></div>\n"},"section2":{"id":2,"length":87,"title":"Using Java Packages for Problem Solving","overview":"Overview: \n\nThe article discusses the use of different Java packages for problem solving in programming and highlights useful resources to aid learning. \n\nHighlights:\n\n- Utilizing Oracle's detailed Java reference to guide programming work \n- Accessing relevant Java tutorials for practical learning and application \n- Recognizing the usefulness of supplementary material as a reference source","content":"\n\n\nWe'll be using a number of different Java packages to help out. As usual, Oracle provides a detailed reference. Somewhat more useful to get going, they also provide a set of Java tutorials. I've provided links to relevant ones within the menu below. Note that they cover much more than we do, and are just provided for your reference in case you want supplementary reading.\n\n\n"},"section1":{"id":1,"length":107,"title":"Web Services and Query Interface for Flickr","overview":"Overview: \nThis section discusses how to obtain and process data from web servers such as Flickr. We will cover how to fully build a simple query interface that implements a GUI allowing for a more visually pleasing interface.\n\nHighlights:\n- Introduction to web servers and networks of machines\n- Processing data across multiple machines\n- Building a query interface for Flickr\n- How to send and process queries\n- Building a graphical user interface (GUI) to provide a nicer interface","content":"\n\n\n<section id=section1><a href=\"#reader-view1\">Web services</a></section>\n So far we've been dealing with the world as it exists on our individual computers. But a lot of exciting problems arise in the context of having multiple machines work together on something. We'll get a taste of such approaches in the upcoming week, starting today with the basic question of how to obtain and process data from web servers. Our goal is to build a simple query interface for Flickr; we'll cover how to send and process queries, and how to use a graphical user interface (GUI) to provide a somewhat nicer interface than we have seen.\n"},"section7":{"id":7,"length":112,"title":"Getting Stuff from the Web","overview":"Overview: This section provides an introduction to retrieving content from the web and the basics of web scraping.\n\nHighlights:\n- Introduction to retrieving content from the web \n- Understanding the basics of web scraping \n- Explanation of HTML parsing and elements \n- Discussion on the use of BeautifulSoup for web scraping \n- Overview of HTTP requests and client libraries like requests \n- Examples of web scraping with Python \n- Best practices for responsible web scraping and potential legal issues.","content":"\n\n\n<section id=section4><a href=\"#reader-view4\">Getting stuff from the web</a></section>\n\n"},"section15":{"id":15,"length":109,"title":"","overview":"Overview: This section provides notes on Java programming for CS 10.\n\nHighlights:\n\n- Java basics, including data types, operators, control structures, and arrays\n- Object-oriented programming concepts in Java, such as classes, objects, inheritance, polymorphism, and interfaces\n- Exception handling in Java\n- Input and output in Java, including file I/O and console I/O\n- Basic GUI programming in Java using Swing components","content":"\n\n\n<section id=section8><a href=\"#reader-view8\">Java notes</a></section>\n\n"},"section13":{"id":13,"length":127,"title":"Overview of the Finished Product in Problem Solving","overview":"Overview:\nThis section, titled \"The Finished Product,\" provides insight into the final stages of problem-solving. It details how to evaluate and refine solutions to ensure they are effective and meet the desired outcomes. \n\nHighlights:\n- Provides a comprehensive understanding of the final stage in problem-solving\n- Offers strategies for carefully evaluating and refining solutions\n- Emphasizes the importance of testing solutions to ensure they are effective and efficient \n- Discusses the need to continually reflect upon the problem-solving process to identify areas for improvement","content":"\n\n\n<section id=section7><a href=\"#reader-view7\">The finished product</a></section>\n\n"},"section5":{"id":5,"length":127,"title":"Graphical User Interface (GUI)","overview":"Overview:\nGraphical User Interface (GUI) refers to the use of interactive and visual components such as input boxes, buttons, and menus to communicate with a computer program. In this section, we will discuss basic concepts of GUI programming, as well as commonly used programming libraries for creating graphical user interfaces in Python.\n\nHighlights:\n- Definition of Graphical User Interface (GUI)\n- Interactive and visual components of GUI\n- Communication with computer programs through GUI programming\n- Basic concepts of GUI programming \n- Programming libraries for creating graphical user interfaces in Python","content":"\n\n\n<section id=section3><a href=\"#reader-view3\">Graphical user interface</a></section>\n\n"},"section14":{"id":14,"length":143,"title":"FlickrSearch.java - Simple Photo Search Tool","overview":"Overview: FlickrSearch.java is a tool that allows users to search for photos using simple queries. The application constructs and executes the query to fetch images from URLs in the XML. This efficient and reliable application is easy to use.\n\nHighlights:\n- LoadImages works the same way as ProcessXML.java code\n- Query specifies parameters to the REST query, including textbox input, sort, and result limit of 10\n- Requires an API key for Flickr, which is provided in the class and easy to apply for\n- Forms image URLs using the technique already discussed and stores them in an array using standard Java image mechanism.","content":"\n\n\nFlickrSearch.java puts together all the pieces we've seen, with just a bit more to drive the search.\n\nThe meat of the application is loadImages, which works basically the same way as our ProcessXML.java code, wrapped up in code to construct and execute the query (one such query returned the XML we used directly there) and fetch images from the URLs in the XML.\n\nThe query specifies the various parameters to the REST query, as specified in the photo search docs on Flickr (note that you can test out the search interactively there). Here we use the textbox input as the value of \"text\" (properly URL encoded), provide the specified sort as the value of \"sort\", and limit the results to 10. To run this yourself, you'll need an API key for Flickr (as given in a final variable). I have obtained one for use in the class and have provided it on Canvas. Please limit your usage of this application to simple and appropriate searches, so that I may maintain my key. If you want to do more extensive searches yourself, it's easy to apply for a key.\n\nWe form the image URLs using the technique we already discussed; the \"z\" at the end of the URLs indicates an image that is max 640 pixels on a side. We then use the standard Java image mechanism to pull in the images and store them in an array. \n\n\n"},"section16":{"id":16,"length":142,"title":"Inner and Anonymous Classes in Java","overview":"Overview: Java allows classes to be defined inside other classes, providing the ability to hide information and keep things local. Inner classes also allow for direct access to the outer class variables and methods. Additionally, anonymous classes can be created without giving them a name, and can use the variables and methods of the outer class.\n\nHighlights:\n- Inner classes can be defined inside other classes for information hiding and locality\n- Inner classes have direct access to the outer class variables and methods\n- Anonymous classes can be created without a name, but use the outer class' variables and methods\n- Both inner and anonymous classes are useful for encapsulation and organizing code","content":"\n\n\n\ninner class\nA class can be defined inside another class, as we saw with the elements of linked lists. There it was useful as a type of information hiding (nobody else needed the elements) and to keep things local. It can be even more useful when the inner class benefits from direct access to the outer class variables and methods.\n\nanonymous class\nAn instance of an inner class can be created without giving that class a name. The superclass is named, and the extensions (additional methods and instance variables) directly coded within the \"new\" call. As an inner class, it can use the outer class variables and methods.\n\n"},"section3":{"id":3,"length":157,"title":"CS 10 | Problem Solving - Course Overview and Outline","overview":"Overview: This article provides a brief overview of CS 10 - Problem Solving, with a focus on the course outline and key topics.\n\nHighlights:\n\n- CS 10 is a course focused on developing problem-solving skills with a focus on computer science.\n- The course is aimed at beginners and those with little to no prior coding experience.\n- Topics covered include programming fundamentals, algorithms, data structures, computer systems, and more.\n- The course is designed to equip students with the skills needed to solve real-world problems using computers.\n- Practical exercises and projects are a key component of the course, allowing students to apply what they learn in a practical setting.","content":"\n\n\n<section id=section2><a href=\"#reader-view2\">Outline</a></section>\n\n"},"section6":{"id":6,"length":159,"title":"Graphical User Interface (GUI) Construction in Java","overview":"Overview: The article explains how to construct a GUI for a photo browser in Java using different components such as buttons, text field, and combo box. It provides details on how to create an instance of an anonymous class as a subclass of JComponent, handle user input events, and use different layout managers to organize different components.\n\nHighlights:\n\n- Construction of a GUI for photo browser using different components \n- Creation of an instance of an anonymous class as a subclass of JComponent\n- Handling user input events such as mouse events and key events\n- Use of different layout managers to organize different components in the GUI\n- Explanation of different types of events in action and how they connect to the methods","content":"\n\n\nLet's start by mocking up a little GUI for the photo browser we have in mind: FlickrSearchCore.java.  GUI construction is tedious, and best done with a GUI development environment that lets us graphically lay out the various components. So we'll just do something simple that illustrates the use of some of the components (buttons, a text field, a combo box); once you've seen these, you can pick up the rest by following the same principles.\n\nWe've gotten away from our good old DrawingGUI, and rolled all the GUI functionality directly here. Thus the class extends JFrame, a Java class for a top-level window.\n\nThe constructor creates a \"canvas\" as a JComponent (generic GUI component) with a method to paint itself. In this method we have to call the superclass paintComponent, and then can do whatever drawing we want to. That will eventually be to display an image, but it's blank for now. \n(In DrawingGUI, this is where I had it call the draw() method that we filled in, in different ways.) One odd thing about this creation of the canvas is that it calls \"new JComponent()\" but then has curly braces and a method definition. This is actually the combination of defining a new class that is a subclass of JComponent, and then creating an instance of that class, all at once. But we never bother to give the class a name — an anonymous class, like the anonymous functions we saw before — because we only ever need that one instance. We could have had a separate class definition in another file, say:\n\npublic class Canvas extends JComponent {\n  public void paintComponent(Graphics g) {\n    super.paintComponent(g);\n    // will add code here to draw the current image\n  }\n};\nAnd then new'ed one of these. The advantage of the anonymous class (besides keeping things self-contained) is that it has access to the instance variables of the containing class. So when the whole thing is finished, we'll actually have the canvas directly access the set of images belonging to its \"parent\" FlickrSearch object; we don't have to pass them in.\n\nAfter the canvas, there's a bunch of boilerplate to set the size, pack the GUI components, make it visible, etc. If you look back at DrawingGUI, you'll see all that stuff in there. (Aren't you glad I buried it under the rug in week one?)\n\nThe other GUI elements are created in a separate method setupGUI(). First we have a \"next\" button and a \"previous\" button that step through the photo array. While these are buttons that you press specifically, rather than just general mouse presses within the window, the mechanism is the same. Again, I buried that under the rug in week one, so that the Java mechanism just ended up calling a \"handleMousePress\" method that we could define ourselves, but this is how that works. \n\nIn order to respond to user input, we need a way to represent the input and invoke appropriate methods. The representation is in terms of \"events\" (e.g., the event that the mouse was pressed), and a \"listener\" machinery tells the GUI what events to pay attention to, and what to do when they happen. For key presses, Java provides KeyEvent instances. For mouse motion, it provides MouseMotion. And for all other kinds of mouse stuff, Java provides MouseEvents — when a mouse button is pressed, released, or clicked (pressed and released without intevening motion), and when the mouse enters from outside the window or exits from the window. The MouseEvent object contains information about where the event happened, which button, modifiers, etc. For GUI components like buttons here, there's a catch-all ActionEvent.\n\nWe have to tell Java what to do when it notices some such event. This is handled by a \"listener\" object that provides an appropriate method to invoke with the event. One of the cases:\n\nprevB.addActionListener(new AbstractAction() {\n  public void actionPerformed(ActionEvent e) {\n     // go to the previous image\n  }\n});\nThis is again an anonymous class, one that extends AbstractAction and provides a method that responds to an event. Here we will again (in the final version) make use of the fact that the class is \"inside\" the FlickrSearch object and can access its instance variables. Look back at DrawingGUI to see the other types of events in action, and how they then connect to the methods you wrote.\n\nThere's another way to provide an action listener as of Java 8: just directly pass a method (here as an anonymous function):\n\nnextB.addActionListener(e -> {\n  // will add code here to move to the next image\n  System.out.println(\"next\");\n});\nThe next GUI element is a combo box (a drop-down menu) that allows selection of how the photos should be sorted — relevance, date, or interestingness (ascending or descending). This component likewise has an action event in which we note the selected sort order. The construction is a little tricky, as we have to specify the options to put in the list. I'm using a hard-coded list of Strings.\n\nThe textbox for the search text is simple, and the search button is set up the same way as the other buttons. Its action is somewhat more complex, as it invokes our search function loadImages() and has to catch some of the errors it might encounter.\n\nThe key thing we have to account for with multiple components is how to lay them out. (That's what's best done graphically.) Java provides a number of different layout managers with different behaviors. We put the buttons in their panel with a \"flow layout\" that just adds them in rows, left to right, with a new row started when the next component won't fit in the current row. We then put that panel along with the canvas into the main content panel with a \"border layout\" that allows the user to put one thing at the top (NORTH), one at the bottom (SOUTH), one on the right side (EAST), one on the left side (WEST), and one in the middle (CENTER). The CENTER expands to occupy all space not used by the other four. So the button panel is at the top and the canvas in the center, taking the rest of the space.\n\n\n"},"section11":{"id":11,"length":133,"title":"Processing XML: How to Handle Your Data","overview":"Overview: This section of CS 10 covers the basics of processing XML (Extensible Markup Language) data, including how to parse and manipulate XML files.\n\nHighlights:\n- XML is a widely used format for exchanging data between servers and clients\n- Parsing XML involves analyzing the structure of the data and extracting the relevant information\n- Libraries like ElementTree and BeautifulSoup make it easier to work with XML files in Python\n- Manipulating XML allows programmers to customize the content and metadata of their data\n- Common use cases for XML include web services, APIs, and configuration files.","content":"\n\n\n<section id=section6><a href=\"#reader-view6\">Processing XML</a></section>\n\n"},"section4":{"id":4,"length":146,"title":"Java Tutorials on Graphical User Interface and Web Services","overview":"Overview: This material is a collection of Java tutorials on Graphical User Interface, web services, IO, and JAXP. Students can learn how to create GUI applications using Swing and how to process XML data. They can also get familiar with web services and learn how to fetch data from Flickr through Java applications.\n\nHighlights:\n- Java tutorials on Swing for building Graphical User Interface\n- Java tutorial on IO to learn how to get stuff from the web\n- Learning web services with Java\n- Java tutorials on JAXP to process XML data\n- Code files for implementing the lessons\n- Lesson notes and slides from class","content":"\n\n\n Graphical user interface [Java tutorials on Swing]\n Getting stuff from the web [Java tutorial on IO]\n Web services\n Processing XML [Java tutorials on JAXP, particularly DOM]\n The finished product\n Java notes\n\n\nAll the code files for today: FlickrSearchJSON.java; FlickrSearchXML.java; FlickrSearchCore.java; ProcessXML.java; json-simple-1.1.1.jar; WWWGet.java; WWWGetTry.java\nNote: you need to download json-simple-1.1.1.jar and install it as an external JAR (as you did for the opencv files) to run FlickrSearchJSON.java.  Otherwise you can run FlickrSearchXML.java without installing the JAR.  The XML version does the same as the JSON version, but exchanges data with Flickr via XML instead of JSON. \n\nSlides from class (Section 12 - AQL)\n\nSlides from class (Section 2 - TJP)\n\n\n"},"section10":{"id":10,"length":189,"title":"Using Basic REST Mechanism for Web Services","overview":"Overview: The article discusses the use of REST (Representational State Transfer) mechanism for web services. Unlike web pages, REST engages with the server to deliver specific results correspondent to input parameters. The article demonstrates a greeting program using REST that takes a parameter name and outputs a greeting message. It also discusses the use of encoding classes for output parameters, and the difference in using \"get\" and \"post\" methods.\n\nHighlights:\n- REST is a powerful mechanism for exchanging information between server and client\n- REST directly uses the \"get\" machinery to fetch web pages and output results\n- Multiple input parameters for REST services can be included, separated by ampersands\n- \"Post\" machinery is another approach for sending data to the server but is more complicated\n- Spaces and special characters in parameter values need to be encoded using classes such as URLEncoder.","content":"\n\n\nInstead of dealing with web pages, we'll be dealing with web services — when information is delivered via this same machinery. In that case, we actively engage with the server, sending it values of parameters with the input, and getting back results specific to that input. It's like a function call (and indeed some of the mechanisms make it feel even more that way). We'll be using a basic, but powerful and common mechanism, called REST (REpresentational State Transfer) that is built directly on top of the same HTTP approach we've just used for web pages.\n\nFor example, here's a greeting program using REST:\nhttp://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=alberto. This is just a URL, extended with a parameter \"name\" whose value here is \"alberto\" (try substituting your own name, of course). Multiple such parameters can be included, separated by \nampersands (&); e.g., http://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=alberto&color=blue. This approach directly uses the \"get\" machinery already in place for fetching web pages. I'm sure you've seen parameters showing up in URLs in other contexts; can you think of a few? A more powerful, but somewhat more complicated, approach is to leverage the \"post\" machinery that is commonly used when sending form data (e.g., when ordering something from a web store). Rather than including the name/value pairs in the URL, they are sent directly afterwards via an established connection. We'll stick with the simpler \"get\" approach.\n\nOne thing to note is that not all characters are acceptable in a URL. For example, URLs aren't supposed to include spaces. So we have to \"URL encode\" the parameter values using an encoding of such \"special characters\". A simple way to do that is with the URLEncoder class:\nURL url = new URL(\"http://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=\"\n         + URLEncoder.encode(\"alberto quattrini li\",\"UTF-8\"));\n\n"},"section12":{"id":12,"length":189,"title":"Handling XML Data in Java","overview":"Overview: This article focuses on handling XML data in Java and covers topics such as encoding data in XML format, interpreting XML tags and retrieving data from XML. It also provides a simple example of a Flickr-based photo search application to illustrate the usage of XML data in Java.\n\nHighlights:\n- XML is a standard way of encoding data that can be interpreted by programs.\n- XML wraps data in tags and can include nested tags and name-value attributes.\n- To work with XML, we need to know how to interpret the tags and their relationships to each other.\n- Java provides numerous XML parsing libraries and the document object model (DOM) approach is used here to directly build a document structure mirroring the nested structure in the XML file.\n- The article provides a simple example of a Flickr-based photo search application to illustrate the usage of XML data in Java.","content":"\n\n\nSo now we've handled sending parameters to a web service; how do we get a response back that we can interpret? There are a number of approaches to encoding data in a way that a program could interpret it. One standard way is XML (eXtensible Markup Language), which is related to and much like HTML (HyperText Markup Language) in that they are both languages (sets of syntax and grammar rules) describing how to represent something. For HTML, that's hypertext; for XML, it's basically anything.\n\nXML represents data by wrapping it with tags that give some meaning to each piece. The tags can be nested, with the inner parts being components of the outer parts. A tag can also have a set of name-value attributes that give particular details (without going to the trouble of nesting them, since they're unique). A simple example:\n<enrollment>\n <course department=\"CS\" number=\"1\" term=\"18W\">\n  <student name=\"Alice\" year=\"20\" />\n  <student name=\"Bob\" year=\"19\" />\n  <student name=\"Charlie\" year=\"18\" />\n </course>\n <course department=\"CS\" number=\"10\" term=\"18W\">\n  <student name=\"Delilah\" year=\"19\" />\n  <student name=\"Elvis\" year=\"00\" />\n  <student name=\"Flora\" year=\"20\" />\n </course>\n</enrollment>Note that tags are enclosed with angle brackets (< ... >) and must come in properly nested pairs (start tag <name> ... end tag </name>;). A start tag can include attributes. If there's nothing to be nested inside an element, the tag can be self-closing, with a slash at the end of the start tag: <name/>.\n\nTo do something with XML, we have to know how to interpret the tags and what their relationships are to each other. That's obviously problem-specific. We're focusing here on a Flickr-based photo search application. We'll give Flickr a query describing the photos we're interested in, and it will return information about the photos that meet our criteria. The Flickr API documentation describes the format for different types of queries; we're doing a standard photo search here. \n\nFortunately the XML is pretty simple. An example (from a search for Dartmouth images, of course): flickr-dart.xml Actually, that's a hand-edited version of what Flickr gave back, as the original included an ampersand in \"Dev & The Cataracs\", which is a no-no in XML. It caused me some pain when writing code to process this, and as you'll see, I just did something simple (aka \"gross hack\") to deal with it.\n\nSo what can we do with XML? For our application, we want to actually pull down the images (we could also label them with their titles, etc., but I'll leave that for you to do on your own, if you're so interested). The Flickr URL documentation says that we can access a photo with a URL of this form:\nhttp://farm{farm-id}.staticflickr.com/{server-id}/{id}_{secret}.jpgSo for example, the fourth image in our XML file (Baker) has this URL:\nhttp://farm3.staticflickr.com/2622/3840099142_fb08d49e3a.jpg.\nLet's write a program to pull the URLs from the XML file. We need an ability to read the XML file into a representation we can handle with a program. Java provides numerous XML parsing libraries. Here I'll use the document object model (DOM) approach, in which we directly build a document structure mirroring the nested structure in the XML file. (If you ever explore your HTML through a power-user tool on your browser, that's the same idea.) The DOM gives us the ability to search for elements with a specific tag name and get their attributes (among many other things; e.g., navigating the nesting structure). So we can find the photos and build the URLs from the attributes as illustrated above.\n\nThe code: ProcessXML.java. Save flickr-dart.xml in a folder called \"inputs\". We start by pulling the XML file into one big String. We read the individual lines, using the same approach we've seen before, and concatenate them together. Along the way, we replace ampersands with pluses, the gross hack I mentioned. Then there's quite a bit of boilerplate to parse the XML string, due to the power and generality of the mechanism. Finally, we piece together the URLs for the photo elements as described. I had to write an extra little piece of code to look up the attribute of a given name and return its value, just by marching down the list of attributes and seeing which one matches.\n\n\n"},"section9":{"id":9,"length":171,"title":"Web Services – An Overview","overview":"Overview: This section provides an introduction to Web Services, one of the most popular ways of communicating information on the internet. The section covers the basics of Web Services and highlights its most important features.\n\nHighlights:\n- Web Services are a means of communication that allows applications to talk to each other over the internet. \n- Web Services use standardized protocols such as XML, SOAP, and HTTP to transmit data between different systems.\n- Web Services can be accessed using simple APIs, which allow developers to easily integrate different systems and applications.\n- Web Services can be used for a wide range of applications, including online payment systems, social networking sites, and e-commerce platforms.\n- Web Services are highly scalable and can be easily customized to meet the needs of different applications and systems.","content":"\n\n\n<section id=section5><a href=\"#reader-view5\">Web services</a></section>\n\n"},"section8":{"id":8,"length":208,"title":"Introduction to Network Programming and HTTP Protocol","overview":"Overview: This article provides insights into network programming and the HTTP protocol. The article talks about how computers transfer information using bits and how network protocols are designed to handle these bits. The HTTP protocol is discussed as a key component of the web and how it allows browsers to communicate with web servers is explained. The article also includes a sample Java program that demonstrates how to extract content from a web server page and provides a code snippet for exception handling.\n\nHighlights:\n- Network programming involves transferring information between computers using bits\n- Network protocols are designed to handle the transfer of bits and improve reliability \n- HTTP is a set of rules for how browsers communicate with web servers \n- The URL provides the global identity of the page you want \n- Java provides libraries for obtaining content from a web server within a program \n- A sample Java program is included to demonstrate how to extract content from a web server \n- The article also provides a code snippet for exception handling","content":"\n\n\nAt its heart, network programming is all about how to properly transfer information between computers. As we discussed briefly when we first encountered type declarations in Java, a computer only ever deals with bits, so how is any particular set of 0s and 1s to be interpreted? What does an incoming bunch of bits imply, and how do I send the appropriate outgoing bunch of bits? That's what network protocols are all about. With the internet, there are multiple layers of how to handle bits, to gain increasing reliability (in case of misread bits, dropped bits or entire messages, etc.). You'll have to take the networking course to get into that; here we're just going to look at a high level, provided by web-based protocols.\n\nA key component of the web is HTTP, the HyperText Transfer Protocol, which is a set of rules for how browsers (and other agents on your machine) communicate with web servers. For example, your browser might ask the Dartmouth web server \"get /~reg/index.html\"; and then the web server responds with the hypertext for that page. Your browser would then notice that there are some images referenced in there, and ask the server for them.  Note that the basic process is stateless (doesn't remember you from one request\nto the next). Cookies, anyone?\n\nThe URL (Uniform Resource Locator) is the global identity of the page you want; e.g. http://www.dartmouth.edu/~reg/index.html\n\n http: — the protocol (how to obtain the document)\n www.dartmouth.edu — the hostname (which machine has it)\n ~reg/ — the path (where on that machine the document is)\n index.html — the file name (if absent, often assumed to be index.html or index.html)\n\n\nJava provides libraries that let us get from a web server, within a program. Here's a little self-referential program that gets this page.\n\n[WWWGet.java]import java.net.*;\nimport java.io.*;\n\npublic class WWWGet {\n\tpublic static void main(String[] args) throws Exception {\n\t\t// Open a stream reader for processing the response from the URL\n\t\tURL url = new URL(\"http://www.cs.dartmouth.edu/~albertoq/cs10/notes21.html\");\n\t\tSystem.out.println(\"*** getting \" + url);\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n\t\t// Read lines from the stream\n\t\tString line;\n\t\twhile ((line = in.readLine()) != null) {\n\t\t\tSystem.out.println(line);\n\t\t}\n\t\tin.close();\n\t\tSystem.out.println(\"*** done\");\n\t}\n}\n\nThe Reader/Stream mechanism for reading data works like we've done previously with files; the difference here is that the file is served up over the web, rather than loaded from your own machine. We create a new InputStreamReader that will get its input from the web server's response for the URL we provide. \n\nAs with files, trying to open and read from a URL can raise exceptions. \nAn exception-handling version of our previous buck-passing program: WWWGetTry.java. The handlers for the exceptions from creating the URL and the reader are at the bottom. We then have a try-within-a-try for reading (boy would Yoda be displeased — do or do not, there is no try), because we want to close the stream no matter what. Note that the stream closing itself can throw an exception, which is handled by the same catcher as for opening. Whew.\n\n\n"}}