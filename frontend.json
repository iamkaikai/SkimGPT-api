{"general":{"title":"<title>CS 10 | Problem solving</title>\n","num_sections":17,"overview":"Title: Understanding Key Concepts in Various CS 10 Topics\n\nOverview: This is a collection of summaries on different CS 10 topics that covers key concepts that students should grasp. It includes topics such as web services, GUI, Java packages, XML processing, and network programming.\n\nHighlights:\n\n- Web services facilitate communication between applications over the web and can be SOAP- or REST-based.\n- GUI enables users to interact with computer programs and provides a visual representation of features.\n- Different Java packages are essential in programming such as the Java Development Kit (JDK).\n- XML processing deals with storing and exchanging data between applications using well-formed XML documents.\n- Network programming is the process of transferring information between computers.\n- Best practices such as testing and refining are essential for successful problem-solving solutions.\n- Important programming concepts to learn include syntax, data types, control structures, and debugging.\n- Students should aim for an efficient workflow that streamlines problem-solving processes.\n- Resources such as online tutorials, Java references, and supplementary materials are available to further enhance Java learning.","resultHtml":"<title>CS 10 | Problem solving</title>\n<div id=\"readability-page-1\" class=\"page\"><div id=\"content\">\n<h2 id=\"notetitle\" section id=reader-view1><a href=\"#section1\">Web services</a></h2> <p>So far we've been dealing with the world as it exists on our individual computers. But a lot of exciting problems arise in the context of having multiple machines work together on something. We'll get a taste of such approaches in the upcoming week, starting today with the basic question of how to obtain and process data from web servers. Our goal is to build a simple query interface for <a href=\"http://www.flickr.com/\">Flickr</a>; we'll cover how to send and process queries, and how to use a graphical user interface (GUI) to provide a somewhat nicer interface than we have seen.</p>\n\n<p>We'll be using a number of different Java packages to help out. As usual, Oracle provides a detailed reference. Somewhat more useful to get going, they also provide a set of <a href=\"http://docs.oracle.com/javase/tutorial/index.html\">Java tutorials</a>. I've provided links to relevant ones within the menu below. Note that they cover much more than we do, and are just provided for your reference in case you want supplementary reading.</p>\n\n<h3 section id=reader-view2><a href=\"#section2\">Outline</a></h3>\n<ul>\n <li><a href=\"#gui\">Graphical user interface</a> [Java tutorials on <a href=\"http://docs.oracle.com/javase/tutorial/uiswing\">Swing</a>]</li>\n <li><a href=\"#get\">Getting stuff from the web</a> [Java tutorial on <a href=\"http://docs.oracle.com/javase/tutorial/essential/io\">IO</a>]</li>\n <li><a href=\"#rest\">Web services</a></li>\n <li><a href=\"#xml\">Processing XML</a> [Java tutorials on <a href=\"http://docs.oracle.com/javase/tutorial/jaxp\">JAXP</a>, particularly <a href=\"http://docs.oracle.com/javase/tutorial/jaxp/dom\">DOM</a>]</li>\n <li><a href=\"#finished\">The finished product</a></li>\n <li><a href=\"#java\">Java notes</a></li>\n</ul>\n\n<p>All the code files for today: <a href=\"notes/21/code/FlickrSearchJSON.java\">FlickrSearchJSON.java</a>; <a href=\"notes/21/code/FlickrSearchXML.java\">FlickrSearchXML.java</a>; <a href=\"notes/21/code/FlickrSearchCore.java\">FlickrSearchCore.java</a>; <a href=\"notes/21/code/ProcessXML.java\">ProcessXML.java</a>; <br><a href=\"notes/21/code/json-simple-1.1.1.jar\">json-simple-1.1.1.jar</a>; <a href=\"notes/21/code/WWWGet.java\">WWWGet.java</a>; <a href=\"notes/21/code/WWWGetTry.java\">WWWGetTry.java</a></p>\n<p>Note: you need to download <a href=\"notes/21/code/json-simple-1.1.1.jar\">json-simple-1.1.1.jar</a> and install it as an external JAR (as you did for the opencv files) to run <a href=\"notes/21/code/FlickrSearchJSON.java\">FlickrSearchJSON.java</a>.  Otherwise you can run <a href=\"notes/21/code/FlickrSearchXML.java\">FlickrSearchXML.java</a> without installing the JAR.  The XML version does the same as the JSON version, but exchanges data with Flickr via XML instead of JSON. </p>\n\n<p><a href=\"slides/Day21.pdf\">Slides from class (Section 12 - AQL)</a></p>\n\n<p><a href=\"https://cs.dartmouth.edu/~tjp/cs10/slides/Day21.pdf\">Slides from class (Section 2 - TJP)</a></p>\n\n<h2 section id=reader-view3><a href=\"#section3\">Graphical user interface</a></h2>\n\n<p>Let's start by mocking up a little GUI for the photo browser we have in mind: <a href=\"notes/21/code/FlickrSearchCore.java\">FlickrSearchCore.java</a>.  GUI construction is tedious, and best done with a GUI development environment that lets us graphically lay out the various components. So we'll just do something simple that illustrates the use of some of the components (buttons, a text field, a combo box); once you've seen these, you can pick up the rest by following the same principles.</p>\n\n<p>We've gotten away from our good old DrawingGUI, and rolled all the GUI functionality directly here. Thus the class extends JFrame, a Java class for a top-level window.</p>\n\n<p>The constructor creates a \"canvas\" as a JComponent (generic GUI component) with a method to paint itself. In this method we have to call the superclass paintComponent, and then can do whatever drawing we want to. That will eventually be to display an image, but it's blank for now. \n(In DrawingGUI, this is where I had it call the draw() method that we filled in, in different ways.) One odd thing about this creation of the canvas is that it calls \"new JComponent()\" but then has curly braces and a method definition. This is actually the combination of defining a new class that is a subclass of JComponent, and then creating an instance of that class, all at once. But we never bother to give the class a name — an anonymous class, like the anonymous functions we saw before — because we only ever need that one instance. We could have had a separate class definition in another file, say:</p>\n\n<pre><code>public class Canvas extends JComponent {\n  public void paintComponent(Graphics g) {\n    super.paintComponent(g);\n    // will add code here to draw the current image\n  }\n};</code></pre>\n<p>And then new'ed one of these. The advantage of the anonymous class (besides keeping things self-contained) is that it has access to the instance variables of the containing class. So when the whole thing is finished, we'll actually have the canvas directly access the set of images belonging to its \"parent\" FlickrSearch object; we don't have to pass them in.</p>\n\n<p>After the canvas, there's a bunch of boilerplate to set the size, pack the GUI components, make it visible, etc. If you look back at DrawingGUI, you'll see all that stuff in there. (Aren't you glad I buried it under the rug in week one?)</p>\n\n<p>The other GUI elements are created in a separate method setupGUI(). First we have a \"next\" button and a \"previous\" button that step through the photo array. While these are buttons that you press specifically, rather than just general mouse presses within the window, the mechanism is the same. Again, I buried that under the rug in week one, so that the Java mechanism just ended up calling a \"handleMousePress\" method that we could define ourselves, but this is how that works. </p>\n\n<p>In order to respond to user input, we need a way to represent the input and invoke appropriate methods. The representation is in terms of \"events\" (e.g., the event that the mouse was pressed), and a \"listener\" machinery tells the GUI what events to pay attention to, and what to do when they happen. For key presses, Java provides KeyEvent instances. For mouse motion, it provides MouseMotion. And for all other kinds of mouse stuff, Java provides MouseEvents — when a mouse button is pressed, released, or clicked (pressed and released without intevening motion), and when the mouse enters from outside the window or exits from the window. The MouseEvent object contains information about where the event happened, which button, modifiers, etc. For GUI components like buttons here, there's a catch-all ActionEvent.</p>\n\n<p>We have to tell Java what to do when it notices some such event. This is handled by a \"listener\" object that provides an appropriate method to invoke with the event. One of the cases:</p>\n\n<pre><code>prevB.addActionListener(new AbstractAction() {\n  public void actionPerformed(ActionEvent e) {\n     // go to the previous image\n  }\n});</code></pre>\n<p>This is again an anonymous class, one that extends AbstractAction and provides a method that responds to an event. Here we will again (in the final version) make use of the fact that the class is \"inside\" the FlickrSearch object and can access its instance variables. Look back at DrawingGUI to see the other types of events in action, and how they then connect to the methods you wrote.</p>\n\n<p>There's another way to provide an action listener as of Java 8: just directly pass a method (here as an anonymous function):</p>\n\n<pre><code>nextB.addActionListener(e -&gt; {\n  // will add code here to move to the next image\n  System.out.println(\"next\");\n});</code></pre>\n<p>The next GUI element is a combo box (a drop-down menu) that allows selection of how the photos should be sorted — relevance, date, or interestingness (ascending or descending). This component likewise has an action event in which we note the selected sort order. The construction is a little tricky, as we have to specify the options to put in the list. I'm using a hard-coded list of Strings.</p>\n\n<p>The textbox for the search text is simple, and the search button is set up the same way as the other buttons. Its action is somewhat more complex, as it invokes our search function loadImages() and has to catch some of the errors it might encounter.</p>\n\n<p>The key thing we have to account for with multiple components is how to lay them out. (That's what's best done graphically.) Java provides a number of different layout managers with different behaviors. We put the buttons in their panel with a \"flow layout\" that just adds them in rows, left to right, with a new row started when the next component won't fit in the current row. We then put that panel along with the canvas into the main content panel with a \"border layout\" that allows the user to put one thing at the top (NORTH), one at the bottom (SOUTH), one on the right side (EAST), one on the left side (WEST), and one in the middle (CENTER). The CENTER expands to occupy all space not used by the other four. So the button panel is at the top and the canvas in the center, taking the rest of the space.</p>\n\n<h2 section id=reader-view4><a href=\"#section4\">Getting stuff from the web</a></h2>\n\n<p>At its heart, network programming is all about how to properly transfer information between computers. As we discussed briefly when we first encountered type declarations in Java, a computer only ever deals with bits, so how is any particular set of 0s and 1s to be interpreted? What does an incoming bunch of bits imply, and how do I send the appropriate outgoing bunch of bits? That's what network <em>protocols</em> are all about. With the internet, there are multiple layers of how to handle bits, to gain increasing reliability (in case of misread bits, dropped bits or entire messages, etc.). You'll have to take the networking course to get into that; here we're just going to look at a high level, provided by web-based protocols.</p>\n\n<p>A key component of the web is HTTP, the HyperText Transfer Protocol, which is a set of rules for how browsers (and other agents on your machine) communicate with web servers. For example, your browser might ask the Dartmouth web server \"<code>get /~reg/index.html</code>\"; and then the web server responds with the hypertext for that page. Your browser would then notice that there are some images referenced in there, and ask the server for them.  Note that the basic process is <em>stateless</em> (doesn't remember you from one request\nto the next). Cookies, anyone?</p>\n\n<p>The URL (Uniform Resource Locator) is the global identity of the page you want; e.g. <code>http://www.dartmouth.edu/~reg/index.html</code></p>\n<ul>\n <li><code>http:</code> — the protocol (how to obtain the document)</li>\n <li><code>www.dartmouth.edu</code> — the hostname (which machine has it)</li>\n <li><code>~reg/</code> — the path (where on that machine the document is)</li>\n <li><code>index.html</code> — the file name (if absent, often assumed to be index.html or index.html)</li>\n</ul>\n\n<p>Java provides libraries that let us get from a web server, within a program. Here's a little self-referential program that gets this page.</p>\n\n<p><a href=\"notes/21/code//WWWGet.java\">[WWWGet.java]</a></p><pre><code>import java.net.*;\nimport java.io.*;\n\npublic class WWWGet {\n\tpublic static void main(String[] args) throws Exception {\n\t\t// Open a stream reader for processing the response from the URL\n\t\tURL url = new URL(\"http://www.cs.dartmouth.edu/~albertoq/cs10/notes21.html\");\n\t\tSystem.out.println(\"*** getting \" + url);\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n\t\t// Read lines from the stream\n\t\tString line;\n\t\twhile ((line = in.readLine()) != null) {\n\t\t\tSystem.out.println(line);\n\t\t}\n\t\tin.close();\n\t\tSystem.out.println(\"*** done\");\n\t}\n}\n</code></pre>\n<p>The Reader/Stream mechanism for reading data works like we've done previously with files; the difference here is that the file is served up over the web, rather than loaded from your own machine. We create a new InputStreamReader that will get its input from the web server's response for the URL we provide.</p> \n\n<p>As with files, trying to open and read from a URL can raise exceptions. \nAn exception-handling version of our previous buck-passing program: <a href=\"notes/21/code/WWWGetTry.java\">WWWGetTry.java</a>. The handlers for the exceptions from creating the URL and the reader are at the bottom. We then have a try-within-a-try for reading (boy would Yoda be displeased — do or do not, there is no try), because we want to close the stream no matter what. Note that the stream closing itself can throw an exception, which is handled by the same catcher as for opening. Whew.</p>\n\n<h2 section id=reader-view5><a href=\"#section5\">Web services</a></h2>\n\n<p>Instead of dealing with web pages, we'll be dealing with web services — when information is delivered via this same machinery. In that case, we actively engage with the server, sending it values of parameters with the input, and getting back results specific to that input. It's like a function call (and indeed some of the mechanisms make it feel even more that way). We'll be using a basic, but powerful and common mechanism, called REST (REpresentational State Transfer) that is built directly on top of the same HTTP approach we've just used for web pages.</p>\n\n<p>For example, here's a greeting program using REST:\n<a href=\"http://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=alberto\">http://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=alberto</a>. This is just a URL, extended with a parameter \"name\" whose value here is \"alberto\" (try substituting your own name, of course). Multiple such parameters can be included, separated by \nampersands (&amp;); e.g., <a href=\"http://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=alberto&amp;color=blue\">http://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=alberto&amp;color=blue</a>. This approach directly uses the \"get\" machinery already in place for fetching web pages. I'm sure you've seen parameters showing up in URLs in other contexts; can you think of a few? A more powerful, but somewhat more complicated, approach is to leverage the \"post\" machinery that is commonly used when sending form data (e.g., when ordering something from a web store). Rather than including the name/value pairs in the URL, they are sent directly afterwards via an established connection. We'll stick with the simpler \"get\" approach.</p>\n\n<p>One thing to note is that not all characters are acceptable in a URL. For example, URLs aren't supposed to include spaces. So we have to \"URL encode\" the parameter values using an encoding of such \"special characters\". A simple way to do that is with the URLEncoder class:</p>\n<pre><code>URL url = new URL(\"http://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=\"\n         + URLEncoder.encode(\"alberto quattrini li\",\"UTF-8\"));</code></pre>\n<h2 section id=reader-view6><a href=\"#section6\">Processing XML</a></h2>\n\n<p>So now we've handled sending parameters to a web service; how do we get a response back that we can interpret? There are a number of approaches to encoding data in a way that a program could interpret it. One standard way is XML (eXtensible Markup Language), which is related to and much like HTML (HyperText Markup Language) in that they are both languages (sets of syntax and grammar rules) describing how to represent something. For HTML, that's hypertext; for XML, it's basically anything.</p>\n\n<p>XML represents data by wrapping it with <em>tags</em> that give some meaning to each piece. The tags can be nested, with the inner parts being components of the outer parts. A tag can also have a set of name-value <em>attributes</em> that give particular details (without going to the trouble of nesting them, since they're unique). A simple example:</p>\n<pre><code>&lt;enrollment&gt;\n &lt;course department=\"CS\" number=\"1\" term=\"18W\"&gt;\n  &lt;student name=\"Alice\" year=\"20\" /&gt;\n  &lt;student name=\"Bob\" year=\"19\" /&gt;\n  &lt;student name=\"Charlie\" year=\"18\" /&gt;\n &lt;/course&gt;\n &lt;course department=\"CS\" number=\"10\" term=\"18W\"&gt;\n  &lt;student name=\"Delilah\" year=\"19\" /&gt;\n  &lt;student name=\"Elvis\" year=\"00\" /&gt;\n  &lt;student name=\"Flora\" year=\"20\" /&gt;\n &lt;/course&gt;\n&lt;/enrollment&gt;</code></pre><p>Note that tags are enclosed with angle brackets (&lt; ... &gt;) and must come in properly nested pairs (start tag &lt;name&gt; ... end tag &lt;/name&gt;;). A start tag can include attributes. If there's nothing to be nested inside an element, the tag can be <em>self-closing</em>, with a slash at the end of the start tag: &lt;name/&gt;.</p>\n\n<p>To do something with XML, we have to know how to interpret the tags and what their relationships are to each other. That's obviously problem-specific. We're focusing here on a Flickr-based photo search application. We'll give Flickr a query describing the photos we're interested in, and it will return information about the photos that meet our criteria. The <a href=\"http://www.flickr.com/services/api/\">Flickr API documentation</a> describes the format for different types of queries; we're doing a standard <a href=\"http://www.flickr.com/services/api/explore/flickr.photos.search\">photo search</a> here. \n\n</p><p>Fortunately the XML is pretty simple. An example (from a search for Dartmouth images, of course): <a href=\"notes/21/flickr-dart.xml\">flickr-dart.xml</a> Actually, that's a hand-edited version of what Flickr gave back, as the original included an ampersand in \"Dev &amp; The Cataracs\", which is a no-no in XML. It caused me some pain when writing code to process this, and as you'll see, I just did something simple (aka \"gross hack\") to deal with it.</p>\n\n<p>So what can we do with XML? For our application, we want to actually pull down the images (we could also label them with their titles, etc., but I'll leave that for you to do on your own, if you're so interested). The <a href=\"http://www.flickr.com/services/api/misc.urls.html\">Flickr URL documentation</a> says that we can access a photo with a URL of this form:</p>\n<pre><code>http://farm{farm-id}.staticflickr.com/{server-id}/{id}_{secret}.jpg</code></pre><p>So for example, the fourth image in our XML file (Baker) has this URL:\n<a href=\"http://farm3.staticflickr.com/2622/3840099142_fb08d49e3a.jpg\">http://farm3.staticflickr.com/2622/3840099142_fb08d49e3a.jpg</a>.</p>\n<p>Let's write a program to pull the URLs from the XML file. We need an ability to read the XML file into a representation we can handle with a program. Java provides numerous XML parsing libraries. Here I'll use the document object model (DOM) approach, in which we directly build a document structure mirroring the nested structure in the XML file. (If you ever explore your HTML through a power-user tool on your browser, that's the same idea.) The DOM gives us the ability to search for elements with a specific tag name and get their attributes (among many other things; e.g., navigating the nesting structure). So we can find the photos and build the URLs from the attributes as illustrated above.</p>\n\n<p>The code: <a href=\"notes/21/code/ProcessXML.java\">ProcessXML.java</a>. Save <a href=\"notes/21/flickr-dart.xml\">flickr-dart.xml</a> in a folder called \"inputs\". We start by pulling the XML file into one big String. We read the individual lines, using the same approach we've seen before, and concatenate them together. Along the way, we replace ampersands with pluses, the gross hack I mentioned. Then there's quite a bit of boilerplate to parse the XML string, due to the power and generality of the mechanism. Finally, we piece together the URLs for the photo elements as described. I had to write an extra little piece of code to look up the attribute of a given name and return its value, just by marching down the list of attributes and seeing which one matches.</p>\n\n<h2 section id=reader-view7><a href=\"#section7\">The finished product</a></h2>\n\n<p><a href=\"notes/21/code/FlickrSearch.java\">FlickrSearch.java</a> puts together all the pieces we've seen, with just a bit more to drive the search.</p>\n\n<p>The meat of the application is loadImages, which works basically the same way as our ProcessXML.java code, wrapped up in code to construct and execute the query (one such query returned the XML we used directly there) and fetch images from the URLs in the XML.</p>\n\n<p>The query specifies the various parameters to the REST query, as specified in the <a href=\"http://www.flickr.com/services/api/explore/flickr.photos.search\">photo search</a> docs on Flickr (note that you can test out the search interactively there). Here we use the textbox input as the value of \"text\" (properly URL encoded), provide the specified sort as the value of \"sort\", and limit the results to 10. To run this yourself, you'll need an API key for Flickr (as given in a final variable). I have obtained one for use in the class and have provided it on Canvas. Please limit your usage of this application to simple and appropriate searches, so that I may maintain my key. If you want to do more extensive searches yourself, it's easy to apply for a key.</p>\n\n<p>We form the image URLs using the technique we already discussed; the \"z\" at the end of the URLs indicates an image that is max 640 pixels on a side. We then use the standard Java image mechanism to pull in the images and store them in an array. </p>\n\n<h2 section id=reader-view8><a href=\"#section8\">Java notes</a></h2>\n\n<dl>\n<dt>inner class</dt>\n<dd>A class can be defined inside another class, as we saw with the elements of linked lists. There it was useful as a type of information hiding (nobody else needed the elements) and to keep things local. It can be even more useful when the inner class benefits from direct access to the outer class variables and methods.</dd>\n\n<dt>anonymous class</dt>\n<dd>An instance of an inner class can be created without giving that class a name. The superclass is named, and the extensions (additional methods and instance variables) directly coded within the \"new\" call. As an inner class, it can use the outer class variables and methods.</dd>\n</dl>\n</div></div>\n"},"section9":{"id":9,"length":71,"title":"Web Services","overview":"Overview: This section discusses the concept of web services and their role in modern software development.\n\nHighlights:\n- Definition of web services\n- Types of web services (SOAP and REST)\n- How web services work\n- Advantages of using web services\n- Examples of web services in different industries","content":"\n\n\n<section id=section5><a href=\"#reader-view5\">Web services</a></section>\n\n"},"section7":{"id":7,"length":119,"title":"Getting Stuff from the Web - A Guide for CS 10 Students","overview":"Overview: This section of the CS 10 curriculum provides students with the necessary skills and knowledge to access and retrieve information from the web, a crucial aspect of problem-solving.\n\nHighlights:\n\n- Understanding the basics of HTTP and URLs\n- Learning how to use web browsers and search engines\n- Differentiating between reliable and unreliable sources\n- Navigating and evaluating online resources\n- Using specialized search techniques to find specific information\n- Adhering to ethical and legal guidelines when using online information.","content":"\n\n\n<section id=section4><a href=\"#reader-view4\">Getting stuff from the web</a></section>\n\n"},"section2":{"id":2,"length":128,"title":"Java Packages and References for CS 10 Problem Solving","overview":"Overview: This section provides an overview of the Java packages used in CS10 Problem Solving and lists the Oracle Java reference materials and supplementary tutorials.\n\n- CS10 Problem solving relies on multiple Java packages.\n- Oracle Java tutorials are available for free.\n- The tutorials serve as guidelines for beginners. \n- Oracle's Java reference materials serve as a valuable resource for experienced programmers.\n- The tutorials cover more than required for CS10 Problem solving and are supplementary materials. \n- Relevant Java tutorial links can be found in the provided menu.","content":"\n\n\nWe'll be using a number of different Java packages to help out. As usual, Oracle provides a detailed reference. Somewhat more useful to get going, they also provide a set of Java tutorials. I've provided links to relevant ones within the menu below. Note that they cover much more than we do, and are just provided for your reference in case you want supplementary reading.\n\n\n"},"section5":{"id":5,"length":129,"title":"Graphical User Interface (GUI) in CS 10","overview":"Overview: This section discusses the importance of Graphical User Interface (GUI) in Computer Science 10 (CS 10) and how it helps in solving problems.\n\n- GUI makes it easier to interact with complex computer programs and applications\n- Allows users to access and manipulate data and information\n- Provides a visual representation of different functions and features\n- GUI helps in simplifying the user's experience and makes it more user-friendly\n- The importance of GUI in CS 10 cannot be overstated, as it provides valuable tools and resources for problem-solving and programming.","content":"\n\n\n<section id=section3><a href=\"#reader-view3\">Graphical user interface</a></section>\n\n"},"section3":{"id":3,"length":141,"title":"","overview":"Overview: The following outline highlights the key components of the CS 10 Problem Solving course.\n\nHighlights:\n- Section 2 provides an outline of the course materials\n- Students will learn how to use computational tools and algorithms to solve practical problems\n- Key topics covered in the course include control structures, lists and loops, event-driven programming, and debugging\n- Students will be expected to complete weekly assignments and a final project\n- The course also includes opportunities for collaboration and peer-to-peer learning through group projects and discussions","content":"\n\n\n<section id=section2><a href=\"#reader-view2\">Outline</a></section>\n\n"},"section1":{"id":1,"length":145,"title":"Introduction to Web Services and Obtaining/Processing Data from Web Servers","overview":"Overview: In this section, we will be discussing how to obtain and process data from web servers, an important aspect of problem-solving in today's computer world. The focus is on building a simple query interface for Flickr, covering how to send and process queries, and how to use a GUI to improve the interface.\n\nHighlights:\n- Introduction to web services and the importance of obtaining and processing data from web servers\n- Building a simple query interface for Flickr\n- Covering the process of sending and processing queries\n- Use of graphical user interface (GUI) to improve the interface of the query system.","content":"\n\n\n<section id=section1><a href=\"#reader-view1\">Web services</a></section>\n So far we've been dealing with the world as it exists on our individual computers. But a lot of exciting problems arise in the context of having multiple machines work together on something. We'll get a taste of such approaches in the upcoming week, starting today with the basic question of how to obtain and process data from web servers. Our goal is to build a simple query interface for Flickr; we'll cover how to send and process queries, and how to use a graphical user interface (GUI) to provide a somewhat nicer interface than we have seen.\n"},"section15":{"id":15,"length":133,"title":"Java Notes for CS 10 Students","overview":"Overview:\nThis section provides Java notes for students studying Problem Solving in CS 10. The notes cover important concepts and tips that are helpful in understanding the programming language.\n\nHighlights:\n- Java is an object-oriented programming language used in many applications\n- Syntax, data types, and control structures are essential concepts to learn in Java\n- Debugging and testing are important skills to develop for successful Java programming\n- The Java Development Kit (JDK) provides the tools needed to write, compile, and run Java programs\n- Resources and online tutorials are available to further enhance Java learning.","content":"\n\n\n<section id=section8><a href=\"#reader-view8\">Java notes</a></section>\n\n"},"section16":{"id":16,"length":131,"title":"Inner and Anonymous Classes in Java","overview":"Overview: Inner and anonymous classes are two important concepts in Java programming. Inner classes, which can be defined inside another class, provide direct access to the outer class's variables and methods. Anonymous classes are instances of inner classes without a class name.\n \nHighlights:\n- Inner classes can be defined inside other classes.\n- Inner classes provide access to outer class variables and methods.\n- Anonymous classes are instances of inner classes without a class name.\n- Anonymous classes can use outer class variables and methods.\n- Inner and anonymous classes can be used to hide information and keep things local.","content":"\n\n\n\ninner class\nA class can be defined inside another class, as we saw with the elements of linked lists. There it was useful as a type of information hiding (nobody else needed the elements) and to keep things local. It can be even more useful when the inner class benefits from direct access to the outer class variables and methods.\n\nanonymous class\nAn instance of an inner class can be created without giving that class a name. The superclass is named, and the extensions (additional methods and instance variables) directly coded within the \"new\" call. As an inner class, it can use the outer class variables and methods.\n\n"},"section6":{"id":6,"length":139,"title":"Building a GUI for the FlickrSearchCore","overview":"Overview: This article explains how to build a graphical user interface (GUI) for the FlickrSearchCore application using various Java components such as buttons, text fields, and combo boxes. The article also discusses how to set up action events and listeners to respond to user input. \n\nHighlights:\n- GUI construction is best done using a GUI development environment.\n- A canvas is created to display images.\n- Java provides key and mouse events that are used to represent user input.\n- Anonymous classes are used to define listeners and respond to events.\n- Different layout managers are utilized to organize components on the GUI.","content":"\n\n\nLet's start by mocking up a little GUI for the photo browser we have in mind: FlickrSearchCore.java.  GUI construction is tedious, and best done with a GUI development environment that lets us graphically lay out the various components. So we'll just do something simple that illustrates the use of some of the components (buttons, a text field, a combo box); once you've seen these, you can pick up the rest by following the same principles.\n\nWe've gotten away from our good old DrawingGUI, and rolled all the GUI functionality directly here. Thus the class extends JFrame, a Java class for a top-level window.\n\nThe constructor creates a \"canvas\" as a JComponent (generic GUI component) with a method to paint itself. In this method we have to call the superclass paintComponent, and then can do whatever drawing we want to. That will eventually be to display an image, but it's blank for now. \n(In DrawingGUI, this is where I had it call the draw() method that we filled in, in different ways.) One odd thing about this creation of the canvas is that it calls \"new JComponent()\" but then has curly braces and a method definition. This is actually the combination of defining a new class that is a subclass of JComponent, and then creating an instance of that class, all at once. But we never bother to give the class a name — an anonymous class, like the anonymous functions we saw before — because we only ever need that one instance. We could have had a separate class definition in another file, say:\n\npublic class Canvas extends JComponent {\n  public void paintComponent(Graphics g) {\n    super.paintComponent(g);\n    // will add code here to draw the current image\n  }\n};\nAnd then new'ed one of these. The advantage of the anonymous class (besides keeping things self-contained) is that it has access to the instance variables of the containing class. So when the whole thing is finished, we'll actually have the canvas directly access the set of images belonging to its \"parent\" FlickrSearch object; we don't have to pass them in.\n\nAfter the canvas, there's a bunch of boilerplate to set the size, pack the GUI components, make it visible, etc. If you look back at DrawingGUI, you'll see all that stuff in there. (Aren't you glad I buried it under the rug in week one?)\n\nThe other GUI elements are created in a separate method setupGUI(). First we have a \"next\" button and a \"previous\" button that step through the photo array. While these are buttons that you press specifically, rather than just general mouse presses within the window, the mechanism is the same. Again, I buried that under the rug in week one, so that the Java mechanism just ended up calling a \"handleMousePress\" method that we could define ourselves, but this is how that works. \n\nIn order to respond to user input, we need a way to represent the input and invoke appropriate methods. The representation is in terms of \"events\" (e.g., the event that the mouse was pressed), and a \"listener\" machinery tells the GUI what events to pay attention to, and what to do when they happen. For key presses, Java provides KeyEvent instances. For mouse motion, it provides MouseMotion. And for all other kinds of mouse stuff, Java provides MouseEvents — when a mouse button is pressed, released, or clicked (pressed and released without intevening motion), and when the mouse enters from outside the window or exits from the window. The MouseEvent object contains information about where the event happened, which button, modifiers, etc. For GUI components like buttons here, there's a catch-all ActionEvent.\n\nWe have to tell Java what to do when it notices some such event. This is handled by a \"listener\" object that provides an appropriate method to invoke with the event. One of the cases:\n\nprevB.addActionListener(new AbstractAction() {\n  public void actionPerformed(ActionEvent e) {\n     // go to the previous image\n  }\n});\nThis is again an anonymous class, one that extends AbstractAction and provides a method that responds to an event. Here we will again (in the final version) make use of the fact that the class is \"inside\" the FlickrSearch object and can access its instance variables. Look back at DrawingGUI to see the other types of events in action, and how they then connect to the methods you wrote.\n\nThere's another way to provide an action listener as of Java 8: just directly pass a method (here as an anonymous function):\n\nnextB.addActionListener(e -> {\n  // will add code here to move to the next image\n  System.out.println(\"next\");\n});\nThe next GUI element is a combo box (a drop-down menu) that allows selection of how the photos should be sorted — relevance, date, or interestingness (ascending or descending). This component likewise has an action event in which we note the selected sort order. The construction is a little tricky, as we have to specify the options to put in the list. I'm using a hard-coded list of Strings.\n\nThe textbox for the search text is simple, and the search button is set up the same way as the other buttons. Its action is somewhat more complex, as it invokes our search function loadImages() and has to catch some of the errors it might encounter.\n\nThe key thing we have to account for with multiple components is how to lay them out. (That's what's best done graphically.) Java provides a number of different layout managers with different behaviors. We put the buttons in their panel with a \"flow layout\" that just adds them in rows, left to right, with a new row started when the next component won't fit in the current row. We then put that panel along with the canvas into the main content panel with a \"border layout\" that allows the user to put one thing at the top (NORTH), one at the bottom (SOUTH), one on the right side (EAST), one on the left side (WEST), and one in the middle (CENTER). The CENTER expands to occupy all space not used by the other four. So the button panel is at the top and the canvas in the center, taking the rest of the space.\n\n\n"},"section13":{"id":13,"length":160,"title":"The Finished Product: Creating Outstanding Problem-Solving Solutions with CS 10","overview":"Overview: In this section, you will learn all about creating outstanding problem-solving solutions with CS 10. From start to finish, you'll gain valuable insights into the process of problem-solving with technology and how to create a finished product that exceeds expectations.\n\nHighlights:\n- Understanding the importance of creating a finished product that reflects the problem-solving process\n- Tips for streamlining your problem-solving process and creating an efficient workflow\n- Techniques for bringing your problem-solving solutions to life with CS 10\n- Best practices for testing and refining your finished product to ensure optimal performance\n- Strategies for documenting and presenting your finished product to stakeholders and other interested parties.","content":"\n\n\n<section id=section7><a href=\"#reader-view7\">The finished product</a></section>\n\n"},"section11":{"id":11,"length":162,"title":"Processing XML: A Guide to Understanding its Uses and How to Implement XML-based Solutions","overview":"Overview: This section delves into the world of XML processing, exploring how to use XML to store and exchange data between applications and enabling efficient data retrieval and analysis. It also provides tips on implementing XML solutions for different types of use cases.\n\nHighlights:\n\n- Overview of XML and its role in data processing\n- Understanding XML syntax and how to create well-formed XML documents\n- Using XML to store and exchange data between different software applications\n- Implementing XML-based solutions for common use cases, such as web development and data retrieval and analysis\n- Techniques for efficient XML processing, including parsing and serialization\n- Tips for troubleshooting common issues with XML implementation and processing.","content":"\n\n\n<section id=section6><a href=\"#reader-view6\">Processing XML</a></section>\n\n"},"section4":{"id":4,"length":165,"title":"Java Tutorials on Graphical User Interface, Web Services, and XML Processing","overview":"Overview: This educational material provides tutorials on different Java libraries and techniques, including Swing for Graphical User Interface, IO for retrieving web data, JAXP DOM for processing XML, and web services for exchanging data. Students will also find the finished products of different exercises in this guide and supplementary notes on Java programming.\n\nHighlights:\n\n- Tutorials on Java Swing for creating Graphical User Interface\n- Introduction to Java IO library for retrieving web data \n- Guidance on web services for exchanging data \n- Tutorials on using JAXP DOM for XML processing \n- Examples of finished products from different exercises \n- Supplementary notes on Java programming and AQL and TJP presented in class.","content":"\n\n\n Graphical user interface [Java tutorials on Swing]\n Getting stuff from the web [Java tutorial on IO]\n Web services\n Processing XML [Java tutorials on JAXP, particularly DOM]\n The finished product\n Java notes\n\n\nAll the code files for today: FlickrSearchJSON.java; FlickrSearchXML.java; FlickrSearchCore.java; ProcessXML.java; json-simple-1.1.1.jar; WWWGet.java; WWWGetTry.java\nNote: you need to download json-simple-1.1.1.jar and install it as an external JAR (as you did for the opencv files) to run FlickrSearchJSON.java.  Otherwise you can run FlickrSearchXML.java without installing the JAR.  The XML version does the same as the JSON version, but exchanges data with Flickr via XML instead of JSON. \n\nSlides from class (Section 12 - AQL)\n\nSlides from class (Section 2 - TJP)\n\n\n"},"section10":{"id":10,"length":194,"title":"Introduction to RESTful Web Services","overview":"Overview: In this piece, we'll be exploring web services and how they differ from web pages. We'll be focusing on RESTful web services, which use a basic mechanism to send and receive information. We'll also be discussing URL parameters and encoding them for use in RESTful web services.\n\nBullet points of highlights:\n- Web services differ from web pages in that we engage with servers to send parameters and receive results\n- REST (REpresentational State Transfer) is a powerful and common mechanism for creating web services using HTTP\n- URLs can include parameters for sending input values to servers\n- Multiple parameters can be separated by ampersands in URLs\n- The \"get\" machinery is used for fetching web pages and sending parameter values\n- Parameters must be URL encoded when using RESTful web services\n- The URLEncoder class provides a simple way to encode special characters in URLs.","content":"\n\n\nInstead of dealing with web pages, we'll be dealing with web services — when information is delivered via this same machinery. In that case, we actively engage with the server, sending it values of parameters with the input, and getting back results specific to that input. It's like a function call (and indeed some of the mechanisms make it feel even more that way). We'll be using a basic, but powerful and common mechanism, called REST (REpresentational State Transfer) that is built directly on top of the same HTTP approach we've just used for web pages.\n\nFor example, here's a greeting program using REST:\nhttp://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=alberto. This is just a URL, extended with a parameter \"name\" whose value here is \"alberto\" (try substituting your own name, of course). Multiple such parameters can be included, separated by \nampersands (&); e.g., http://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=alberto&color=blue. This approach directly uses the \"get\" machinery already in place for fetching web pages. I'm sure you've seen parameters showing up in URLs in other contexts; can you think of a few? A more powerful, but somewhat more complicated, approach is to leverage the \"post\" machinery that is commonly used when sending form data (e.g., when ordering something from a web store). Rather than including the name/value pairs in the URL, they are sent directly afterwards via an established connection. We'll stick with the simpler \"get\" approach.\n\nOne thing to note is that not all characters are acceptable in a URL. For example, URLs aren't supposed to include spaces. So we have to \"URL encode\" the parameter values using an encoding of such \"special characters\". A simple way to do that is with the URLEncoder class:\nURL url = new URL(\"http://cs.dartmouth.edu/~albertoq/cs10/hello.php?name=\"\n         + URLEncoder.encode(\"alberto quattrini li\",\"UTF-8\"));\n\n"},"section14":{"id":14,"length":207,"title":"FlickrSearch.java for Photo Search on Flickr","overview":"Overview: FlickrSearch.java is a program that constructs and executes a query using REST, which fetches photos from URLs on Flickr. The program uses the textbox input as the value of \"text\", provides the specified sort as the value of \"sort\", and limits the results to 10. The image URLs are formed and images fetched using Java's standard image mechanism. \n\nHighlights:\n- FlickrSearch.java is a program for fetching photos from URLs on Flickr\n- loadImages method functions like the ProcessXML.java code wrapped with additional code to execute and construct the query\n- Query specifies parameters according to Flickr's photo search docs \n- Final variable contains an API key that is required to run the program\n- Images are formed using the same technique discussed before with \"z\" at the end indicating the maximum 640 pixels on a side\n- Standard Java image mechanism is used to pull in and store the images in an array","content":"\n\n\nFlickrSearch.java puts together all the pieces we've seen, with just a bit more to drive the search.\n\nThe meat of the application is loadImages, which works basically the same way as our ProcessXML.java code, wrapped up in code to construct and execute the query (one such query returned the XML we used directly there) and fetch images from the URLs in the XML.\n\nThe query specifies the various parameters to the REST query, as specified in the photo search docs on Flickr (note that you can test out the search interactively there). Here we use the textbox input as the value of \"text\" (properly URL encoded), provide the specified sort as the value of \"sort\", and limit the results to 10. To run this yourself, you'll need an API key for Flickr (as given in a final variable). I have obtained one for use in the class and have provided it on Canvas. Please limit your usage of this application to simple and appropriate searches, so that I may maintain my key. If you want to do more extensive searches yourself, it's easy to apply for a key.\n\nWe form the image URLs using the technique we already discussed; the \"z\" at the end of the URLs indicates an image that is max 640 pixels on a side. We then use the standard Java image mechanism to pull in the images and store them in an array. \n\n\n"},"section8":{"id":8,"length":224,"title":"Network Programming and HTTP in Java","overview":"Overview: This article discusses network programming in Java and how to transfer information between computers using web-based protocols. It highlights the key component of the web, HTTP (Hypertext Transfer Protocol), and explains how it communicates with web servers. Additionally, it provides an example Java program, WWWGet.java, which retrieves data from a web server, and demonstrates how to handle exceptions when reading from a URL.\n\nHighlights:\n- Network programming is the process of transferring information between computers\n- Computers deal with bits, and network protocols interpret them to transfer information\n- HTTP is the set of rules for how browsers and other agents communicate with web servers\n- The URL, or Uniform Resource Locator, identifies the global identity of a web page\n- Java provides libraries for getting information from a web server\n- The WWWGet.java program retrieves data from a web server using network programming in Java\n- Exception handling is essential when reading data from the web, and the article provides an example in WWWGetTry.java.","content":"\n\n\nAt its heart, network programming is all about how to properly transfer information between computers. As we discussed briefly when we first encountered type declarations in Java, a computer only ever deals with bits, so how is any particular set of 0s and 1s to be interpreted? What does an incoming bunch of bits imply, and how do I send the appropriate outgoing bunch of bits? That's what network protocols are all about. With the internet, there are multiple layers of how to handle bits, to gain increasing reliability (in case of misread bits, dropped bits or entire messages, etc.). You'll have to take the networking course to get into that; here we're just going to look at a high level, provided by web-based protocols.\n\nA key component of the web is HTTP, the HyperText Transfer Protocol, which is a set of rules for how browsers (and other agents on your machine) communicate with web servers. For example, your browser might ask the Dartmouth web server \"get /~reg/index.html\"; and then the web server responds with the hypertext for that page. Your browser would then notice that there are some images referenced in there, and ask the server for them.  Note that the basic process is stateless (doesn't remember you from one request\nto the next). Cookies, anyone?\n\nThe URL (Uniform Resource Locator) is the global identity of the page you want; e.g. http://www.dartmouth.edu/~reg/index.html\n\n http: — the protocol (how to obtain the document)\n www.dartmouth.edu — the hostname (which machine has it)\n ~reg/ — the path (where on that machine the document is)\n index.html — the file name (if absent, often assumed to be index.html or index.html)\n\n\nJava provides libraries that let us get from a web server, within a program. Here's a little self-referential program that gets this page.\n\n[WWWGet.java]import java.net.*;\nimport java.io.*;\n\npublic class WWWGet {\n\tpublic static void main(String[] args) throws Exception {\n\t\t// Open a stream reader for processing the response from the URL\n\t\tURL url = new URL(\"http://www.cs.dartmouth.edu/~albertoq/cs10/notes21.html\");\n\t\tSystem.out.println(\"*** getting \" + url);\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n\t\t// Read lines from the stream\n\t\tString line;\n\t\twhile ((line = in.readLine()) != null) {\n\t\t\tSystem.out.println(line);\n\t\t}\n\t\tin.close();\n\t\tSystem.out.println(\"*** done\");\n\t}\n}\n\nThe Reader/Stream mechanism for reading data works like we've done previously with files; the difference here is that the file is served up over the web, rather than loaded from your own machine. We create a new InputStreamReader that will get its input from the web server's response for the URL we provide. \n\nAs with files, trying to open and read from a URL can raise exceptions. \nAn exception-handling version of our previous buck-passing program: WWWGetTry.java. The handlers for the exceptions from creating the URL and the reader are at the bottom. We then have a try-within-a-try for reading (boy would Yoda be displeased — do or do not, there is no try), because we want to close the stream no matter what. Note that the stream closing itself can throw an exception, which is handled by the same catcher as for opening. Whew.\n\n\n"},"section12":{"id":12,"length":241,"title":"Interpreting XML for a Flickr-based Photo Search Application","overview":"Overview: This article discusses the use of XML as a means to represent and interpret data for a Flickr-based photo search application. It explains how XML encodes data into tags with specific meanings, nested and with attribute values, and how to interpret these tags for specific applications. The article also provides a simple example of using Java's DOM-based XML parsing library to extract photo URLs from an XML file.\n\nHighlights:\n\n- XML is a standard way to encode data that programs can interpret, using tags to represent data with specific meanings.\n- Tags can be nested and include attribute values to give additional meaning to the data they represent.\n- XML files need to be interpreted according to the application they're being used for.\n- Flickr provides a simple XML format for photo search queries.\n- Java provides a variety of XML parsing libraries, including DOM for direct representation of nested XML files.\n- The DOM allows for easy searching and navigation of the nested XML tags to extract specific data.\n- The Flickr XML file can be used to extract photo URLs for use in a Flickr photo search application.","content":"\n\n\nSo now we've handled sending parameters to a web service; how do we get a response back that we can interpret? There are a number of approaches to encoding data in a way that a program could interpret it. One standard way is XML (eXtensible Markup Language), which is related to and much like HTML (HyperText Markup Language) in that they are both languages (sets of syntax and grammar rules) describing how to represent something. For HTML, that's hypertext; for XML, it's basically anything.\n\nXML represents data by wrapping it with tags that give some meaning to each piece. The tags can be nested, with the inner parts being components of the outer parts. A tag can also have a set of name-value attributes that give particular details (without going to the trouble of nesting them, since they're unique). A simple example:\n<enrollment>\n <course department=\"CS\" number=\"1\" term=\"18W\">\n  <student name=\"Alice\" year=\"20\" />\n  <student name=\"Bob\" year=\"19\" />\n  <student name=\"Charlie\" year=\"18\" />\n </course>\n <course department=\"CS\" number=\"10\" term=\"18W\">\n  <student name=\"Delilah\" year=\"19\" />\n  <student name=\"Elvis\" year=\"00\" />\n  <student name=\"Flora\" year=\"20\" />\n </course>\n</enrollment>Note that tags are enclosed with angle brackets (< ... >) and must come in properly nested pairs (start tag <name> ... end tag </name>;). A start tag can include attributes. If there's nothing to be nested inside an element, the tag can be self-closing, with a slash at the end of the start tag: <name/>.\n\nTo do something with XML, we have to know how to interpret the tags and what their relationships are to each other. That's obviously problem-specific. We're focusing here on a Flickr-based photo search application. We'll give Flickr a query describing the photos we're interested in, and it will return information about the photos that meet our criteria. The Flickr API documentation describes the format for different types of queries; we're doing a standard photo search here. \n\nFortunately the XML is pretty simple. An example (from a search for Dartmouth images, of course): flickr-dart.xml Actually, that's a hand-edited version of what Flickr gave back, as the original included an ampersand in \"Dev & The Cataracs\", which is a no-no in XML. It caused me some pain when writing code to process this, and as you'll see, I just did something simple (aka \"gross hack\") to deal with it.\n\nSo what can we do with XML? For our application, we want to actually pull down the images (we could also label them with their titles, etc., but I'll leave that for you to do on your own, if you're so interested). The Flickr URL documentation says that we can access a photo with a URL of this form:\nhttp://farm{farm-id}.staticflickr.com/{server-id}/{id}_{secret}.jpgSo for example, the fourth image in our XML file (Baker) has this URL:\nhttp://farm3.staticflickr.com/2622/3840099142_fb08d49e3a.jpg.\nLet's write a program to pull the URLs from the XML file. We need an ability to read the XML file into a representation we can handle with a program. Java provides numerous XML parsing libraries. Here I'll use the document object model (DOM) approach, in which we directly build a document structure mirroring the nested structure in the XML file. (If you ever explore your HTML through a power-user tool on your browser, that's the same idea.) The DOM gives us the ability to search for elements with a specific tag name and get their attributes (among many other things; e.g., navigating the nesting structure). So we can find the photos and build the URLs from the attributes as illustrated above.\n\nThe code: ProcessXML.java. Save flickr-dart.xml in a folder called \"inputs\". We start by pulling the XML file into one big String. We read the individual lines, using the same approach we've seen before, and concatenate them together. Along the way, we replace ampersands with pluses, the gross hack I mentioned. Then there's quite a bit of boilerplate to parse the XML string, due to the power and generality of the mechanism. Finally, we piece together the URLs for the photo elements as described. I had to write an extra little piece of code to look up the attribute of a given name and return its value, just by marching down the list of attributes and seeing which one matches.\n\n\n"}}